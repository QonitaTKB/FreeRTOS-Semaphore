
Exercise8-Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003fc4  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e0  080040d4  080040d4  000050d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b4  080041b4  00006010  2**0
                  CONTENTS
  4 .ARM          00000000  080041b4  080041b4  00006010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041b4  080041b4  00006010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b4  080041b4  000051b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041b8  080041b8  000051b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  080041bc  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001028  20000010  080041cc  00006010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001038  080041cc  00006038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dad4  00000000  00000000  00006039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000264d  00000000  00000000  00013b0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  00016160  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b95  00000000  00000000  00017070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001836a  00000000  00000000  00017c05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ff49  00000000  00000000  0002ff6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090525  00000000  00000000  0003feb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d03dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e2c  00000000  00000000  000d0420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000d424c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000010 	.word	0x20000010
 800012c:	00000000 	.word	0x00000000
 8000130:	080040bc 	.word	0x080040bc

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000014 	.word	0x20000014
 800014c:	080040bc 	.word	0x080040bc

08000150 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000150:	b480      	push	{r7}
 8000152:	b085      	sub	sp, #20
 8000154:	af00      	add	r7, sp, #0
 8000156:	60f8      	str	r0, [r7, #12]
 8000158:	60b9      	str	r1, [r7, #8]
 800015a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800015c:	68fb      	ldr	r3, [r7, #12]
 800015e:	4a06      	ldr	r2, [pc, #24]	@ (8000178 <vApplicationGetIdleTaskMemory+0x28>)
 8000160:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000162:	68bb      	ldr	r3, [r7, #8]
 8000164:	4a05      	ldr	r2, [pc, #20]	@ (800017c <vApplicationGetIdleTaskMemory+0x2c>)
 8000166:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000168:	687b      	ldr	r3, [r7, #4]
 800016a:	2280      	movs	r2, #128	@ 0x80
 800016c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800016e:	bf00      	nop
 8000170:	3714      	adds	r7, #20
 8000172:	46bd      	mov	sp, r7
 8000174:	bc80      	pop	{r7}
 8000176:	4770      	bx	lr
 8000178:	2000002c 	.word	0x2000002c
 800017c:	20000080 	.word	0x20000080

08000180 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000180:	b5b0      	push	{r4, r5, r7, lr}
 8000182:	b09c      	sub	sp, #112	@ 0x70
 8000184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	StartFlag = 1;
 8000186:	4b38      	ldr	r3, [pc, #224]	@ (8000268 <main+0xe8>)
 8000188:	2201      	movs	r2, #1
 800018a:	701a      	strb	r2, [r3, #0]
	GreenFlag = 1;
 800018c:	4b37      	ldr	r3, [pc, #220]	@ (800026c <main+0xec>)
 800018e:	2201      	movs	r2, #1
 8000190:	701a      	strb	r2, [r3, #0]
	RedFlag = 1;
 8000192:	4b37      	ldr	r3, [pc, #220]	@ (8000270 <main+0xf0>)
 8000194:	2201      	movs	r2, #1
 8000196:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000198:	f000 fa84 	bl	80006a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019c:	f000 f880 	bl	80002a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001a0:	f000 f908 	bl	80003b4 <MX_GPIO_Init>
  MX_TIM4_Init();
 80001a4:	f000 f8b8 	bl	8000318 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, HIGH);
 80001a8:	2200      	movs	r2, #0
 80001aa:	2104      	movs	r1, #4
 80001ac:	4831      	ldr	r0, [pc, #196]	@ (8000274 <main+0xf4>)
 80001ae:	f000 fd67 	bl	8000c80 <HAL_GPIO_WritePin>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  // Inisialisasi semaphore menggunakan osSemaphoreNew (CMSIS-RTOS2)
  CriticalResourceSemaphoreHandle = osSemaphoreCreate(osSemaphore(CriticalResourceSemaphore), 1);
 80001b2:	2101      	movs	r1, #1
 80001b4:	4830      	ldr	r0, [pc, #192]	@ (8000278 <main+0xf8>)
 80001b6:	f001 fc7a 	bl	8001aae <osSemaphoreCreate>
 80001ba:	4603      	mov	r3, r0
 80001bc:	4a2f      	ldr	r2, [pc, #188]	@ (800027c <main+0xfc>)
 80001be:	6013      	str	r3, [r2, #0]
  if (CriticalResourceSemaphoreHandle == NULL) {
 80001c0:	4b2e      	ldr	r3, [pc, #184]	@ (800027c <main+0xfc>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	2b00      	cmp	r3, #0
 80001c6:	d101      	bne.n	80001cc <main+0x4c>
      Error_Handler(); // Handle semaphore creation error
 80001c8:	f000 f9bc 	bl	8000544 <Error_Handler>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80001cc:	4b2c      	ldr	r3, [pc, #176]	@ (8000280 <main+0x100>)
 80001ce:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80001d2:	461d      	mov	r5, r3
 80001d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80001dc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80001e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80001e4:	2100      	movs	r1, #0
 80001e6:	4618      	mov	r0, r3
 80001e8:	f001 fc01 	bl	80019ee <osThreadCreate>
 80001ec:	4603      	mov	r3, r0
 80001ee:	4a25      	ldr	r2, [pc, #148]	@ (8000284 <main+0x104>)
 80001f0:	6013      	str	r3, [r2, #0]

  /* definition and creation of Green_Led_Flash */
  osThreadDef(Green_Led_Flash, GreenTask, osPriorityIdle, 0, 128);
 80001f2:	4b25      	ldr	r3, [pc, #148]	@ (8000288 <main+0x108>)
 80001f4:	f107 0438 	add.w	r4, r7, #56	@ 0x38
 80001f8:	461d      	mov	r5, r3
 80001fa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80001fc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80001fe:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000202:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Green_Led_FlashHandle = osThreadCreate(osThread(Green_Led_Flash), NULL);
 8000206:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800020a:	2100      	movs	r1, #0
 800020c:	4618      	mov	r0, r3
 800020e:	f001 fbee 	bl	80019ee <osThreadCreate>
 8000212:	4603      	mov	r3, r0
 8000214:	4a1d      	ldr	r2, [pc, #116]	@ (800028c <main+0x10c>)
 8000216:	6013      	str	r3, [r2, #0]

  /* definition and creation of Red_Led_Flash */
  osThreadDef(Red_Led_Flash, RedTask, osPriorityIdle, 0, 128);
 8000218:	4b1d      	ldr	r3, [pc, #116]	@ (8000290 <main+0x110>)
 800021a:	f107 041c 	add.w	r4, r7, #28
 800021e:	461d      	mov	r5, r3
 8000220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000224:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000228:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Red_Led_FlashHandle = osThreadCreate(osThread(Red_Led_Flash), NULL);
 800022c:	f107 031c 	add.w	r3, r7, #28
 8000230:	2100      	movs	r1, #0
 8000232:	4618      	mov	r0, r3
 8000234:	f001 fbdb 	bl	80019ee <osThreadCreate>
 8000238:	4603      	mov	r3, r0
 800023a:	4a16      	ldr	r2, [pc, #88]	@ (8000294 <main+0x114>)
 800023c:	6013      	str	r3, [r2, #0]

  /* definition and creation of Orange_Led_Flas */
  osThreadDef(Orange_Led_Flas, OrangeTask, osPriorityIdle, 0, 128);
 800023e:	4b16      	ldr	r3, [pc, #88]	@ (8000298 <main+0x118>)
 8000240:	463c      	mov	r4, r7
 8000242:	461d      	mov	r5, r3
 8000244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000246:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000248:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800024c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Orange_Led_FlasHandle = osThreadCreate(osThread(Orange_Led_Flas), NULL);
 8000250:	463b      	mov	r3, r7
 8000252:	2100      	movs	r1, #0
 8000254:	4618      	mov	r0, r3
 8000256:	f001 fbca 	bl	80019ee <osThreadCreate>
 800025a:	4603      	mov	r3, r0
 800025c:	4a0f      	ldr	r2, [pc, #60]	@ (800029c <main+0x11c>)
 800025e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000260:	f001 fbbe 	bl	80019e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000264:	bf00      	nop
 8000266:	e7fd      	b.n	8000264 <main+0xe4>
 8000268:	200002d8 	.word	0x200002d8
 800026c:	200002da 	.word	0x200002da
 8000270:	200002d9 	.word	0x200002d9
 8000274:	40010800 	.word	0x40010800
 8000278:	08004188 	.word	0x08004188
 800027c:	200002dc 	.word	0x200002dc
 8000280:	080040e0 	.word	0x080040e0
 8000284:	200002c8 	.word	0x200002c8
 8000288:	0800410c 	.word	0x0800410c
 800028c:	200002cc 	.word	0x200002cc
 8000290:	08004138 	.word	0x08004138
 8000294:	200002d0 	.word	0x200002d0
 8000298:	08004164 	.word	0x08004164
 800029c:	200002d4 	.word	0x200002d4

080002a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b090      	sub	sp, #64	@ 0x40
 80002a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002a6:	f107 0318 	add.w	r3, r7, #24
 80002aa:	2228      	movs	r2, #40	@ 0x28
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f003 feca 	bl	8004048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002b4:	1d3b      	adds	r3, r7, #4
 80002b6:	2200      	movs	r2, #0
 80002b8:	601a      	str	r2, [r3, #0]
 80002ba:	605a      	str	r2, [r3, #4]
 80002bc:	609a      	str	r2, [r3, #8]
 80002be:	60da      	str	r2, [r3, #12]
 80002c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c2:	2302      	movs	r3, #2
 80002c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c6:	2301      	movs	r3, #1
 80002c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ca:	2310      	movs	r3, #16
 80002cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002d2:	f107 0318 	add.w	r3, r7, #24
 80002d6:	4618      	mov	r0, r3
 80002d8:	f000 fd04 	bl	8000ce4 <HAL_RCC_OscConfig>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002e2:	f000 f92f 	bl	8000544 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002e6:	230f      	movs	r3, #15
 80002e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002ea:	2300      	movs	r3, #0
 80002ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002f2:	2300      	movs	r3, #0
 80002f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002f6:	2300      	movs	r3, #0
 80002f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002fa:	1d3b      	adds	r3, r7, #4
 80002fc:	2100      	movs	r1, #0
 80002fe:	4618      	mov	r0, r3
 8000300:	f000 ff72 	bl	80011e8 <HAL_RCC_ClockConfig>
 8000304:	4603      	mov	r3, r0
 8000306:	2b00      	cmp	r3, #0
 8000308:	d001      	beq.n	800030e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800030a:	f000 f91b 	bl	8000544 <Error_Handler>
  }
}
 800030e:	bf00      	nop
 8000310:	3740      	adds	r7, #64	@ 0x40
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
	...

08000318 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b086      	sub	sp, #24
 800031c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800031e:	f107 0308 	add.w	r3, r7, #8
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
 8000326:	605a      	str	r2, [r3, #4]
 8000328:	609a      	str	r2, [r3, #8]
 800032a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800032c:	463b      	mov	r3, r7
 800032e:	2200      	movs	r2, #0
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000334:	4b1d      	ldr	r3, [pc, #116]	@ (80003ac <MX_TIM4_Init+0x94>)
 8000336:	4a1e      	ldr	r2, [pc, #120]	@ (80003b0 <MX_TIM4_Init+0x98>)
 8000338:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800033a:	4b1c      	ldr	r3, [pc, #112]	@ (80003ac <MX_TIM4_Init+0x94>)
 800033c:	2200      	movs	r2, #0
 800033e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000340:	4b1a      	ldr	r3, [pc, #104]	@ (80003ac <MX_TIM4_Init+0x94>)
 8000342:	2200      	movs	r2, #0
 8000344:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000346:	4b19      	ldr	r3, [pc, #100]	@ (80003ac <MX_TIM4_Init+0x94>)
 8000348:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800034c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800034e:	4b17      	ldr	r3, [pc, #92]	@ (80003ac <MX_TIM4_Init+0x94>)
 8000350:	2200      	movs	r2, #0
 8000352:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000354:	4b15      	ldr	r3, [pc, #84]	@ (80003ac <MX_TIM4_Init+0x94>)
 8000356:	2200      	movs	r2, #0
 8000358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800035a:	4814      	ldr	r0, [pc, #80]	@ (80003ac <MX_TIM4_Init+0x94>)
 800035c:	f001 f8a0 	bl	80014a0 <HAL_TIM_Base_Init>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d001      	beq.n	800036a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000366:	f000 f8ed 	bl	8000544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800036a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800036e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000370:	f107 0308 	add.w	r3, r7, #8
 8000374:	4619      	mov	r1, r3
 8000376:	480d      	ldr	r0, [pc, #52]	@ (80003ac <MX_TIM4_Init+0x94>)
 8000378:	f001 f8e1 	bl	800153e <HAL_TIM_ConfigClockSource>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000382:	f000 f8df 	bl	8000544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000386:	2300      	movs	r3, #0
 8000388:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800038a:	2300      	movs	r3, #0
 800038c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800038e:	463b      	mov	r3, r7
 8000390:	4619      	mov	r1, r3
 8000392:	4806      	ldr	r0, [pc, #24]	@ (80003ac <MX_TIM4_Init+0x94>)
 8000394:	f001 fa9e 	bl	80018d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000398:	4603      	mov	r3, r0
 800039a:	2b00      	cmp	r3, #0
 800039c:	d001      	beq.n	80003a2 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800039e:	f000 f8d1 	bl	8000544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80003a2:	bf00      	nop
 80003a4:	3718      	adds	r7, #24
 80003a6:	46bd      	mov	sp, r7
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	20000280 	.word	0x20000280
 80003b0:	40000800 	.word	0x40000800

080003b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ba:	f107 0308 	add.w	r3, r7, #8
 80003be:	2200      	movs	r2, #0
 80003c0:	601a      	str	r2, [r3, #0]
 80003c2:	605a      	str	r2, [r3, #4]
 80003c4:	609a      	str	r2, [r3, #8]
 80003c6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c8:	4b11      	ldr	r3, [pc, #68]	@ (8000410 <MX_GPIO_Init+0x5c>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	4a10      	ldr	r2, [pc, #64]	@ (8000410 <MX_GPIO_Init+0x5c>)
 80003ce:	f043 0304 	orr.w	r3, r3, #4
 80003d2:	6193      	str	r3, [r2, #24]
 80003d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000410 <MX_GPIO_Init+0x5c>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	f003 0304 	and.w	r3, r3, #4
 80003dc:	607b      	str	r3, [r7, #4]
 80003de:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led2_Pin|led3_Pin|led4_Pin, GPIO_PIN_RESET);
 80003e0:	2200      	movs	r2, #0
 80003e2:	210f      	movs	r1, #15
 80003e4:	480b      	ldr	r0, [pc, #44]	@ (8000414 <MX_GPIO_Init+0x60>)
 80003e6:	f000 fc4b 	bl	8000c80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : led1_Pin led2_Pin led3_Pin led4_Pin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin|led3_Pin|led4_Pin;
 80003ea:	230f      	movs	r3, #15
 80003ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80003ee:	2301      	movs	r3, #1
 80003f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003f2:	2300      	movs	r3, #0
 80003f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80003f6:	2302      	movs	r3, #2
 80003f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003fa:	f107 0308 	add.w	r3, r7, #8
 80003fe:	4619      	mov	r1, r3
 8000400:	4804      	ldr	r0, [pc, #16]	@ (8000414 <MX_GPIO_Init+0x60>)
 8000402:	f000 fab9 	bl	8000978 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000406:	bf00      	nop
 8000408:	3718      	adds	r7, #24
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	bf00      	nop
 8000410:	40021000 	.word	0x40021000
 8000414:	40010800 	.word	0x40010800

08000418 <AccessSharedData>:

/* USER CODE BEGIN 4 */
void AccessSharedData(void) {
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	//osSemaphoreAcquire(CriticalResourceSemaphoreHandle, osWaitForever);
    if (StartFlag == 1) {
 800041c:	4b0d      	ldr	r3, [pc, #52]	@ (8000454 <AccessSharedData+0x3c>)
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	2b01      	cmp	r3, #1
 8000422:	d103      	bne.n	800042c <AccessSharedData+0x14>
        // Set Start flag to Down to indicate resource is in use
        StartFlag = 0;
 8000424:	4b0b      	ldr	r3, [pc, #44]	@ (8000454 <AccessSharedData+0x3c>)
 8000426:	2200      	movs	r2, #0
 8000428:	701a      	strb	r2, [r3, #0]
 800042a:	e004      	b.n	8000436 <AccessSharedData+0x1e>
    } else {
        // Resource contention: Turn on Blue LED
        HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, HIGH);
 800042c:	2200      	movs	r2, #0
 800042e:	2104      	movs	r1, #4
 8000430:	4809      	ldr	r0, [pc, #36]	@ (8000458 <AccessSharedData+0x40>)
 8000432:	f000 fc25 	bl	8000c80 <HAL_GPIO_WritePin>
    }
    // Simulate read/write operations with a delay of 500 milliseconds
  //    SimulateReadWriteOperation();
      HAL_Delay(500);
 8000436:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800043a:	f000 f995 	bl	8000768 <HAL_Delay>

      // Set Start flag back to Up to indicate resource is free
      StartFlag = 1;
 800043e:	4b05      	ldr	r3, [pc, #20]	@ (8000454 <AccessSharedData+0x3c>)
 8000440:	2201      	movs	r2, #1
 8000442:	701a      	strb	r2, [r3, #0]

      // Turn off Blue LED (if it was turned on during contention)
      HAL_GPIO_WritePin(led3_GPIO_Port, led3_Pin, LOW);
 8000444:	2201      	movs	r2, #1
 8000446:	2104      	movs	r1, #4
 8000448:	4803      	ldr	r0, [pc, #12]	@ (8000458 <AccessSharedData+0x40>)
 800044a:	f000 fc19 	bl	8000c80 <HAL_GPIO_WritePin>

      //osSemaphoreRelease(CriticalResourceSemaphoreHandle);
  }
 800044e:	bf00      	nop
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	200002d8 	.word	0x200002d8
 8000458:	40010800 	.word	0x40010800

0800045c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800045c:	b580      	push	{r7, lr}
 800045e:	b082      	sub	sp, #8
 8000460:	af00      	add	r7, sp, #0
 8000462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000464:	2001      	movs	r0, #1
 8000466:	f001 fb0e 	bl	8001a86 <osDelay>
 800046a:	e7fb      	b.n	8000464 <StartDefaultTask+0x8>

0800046c <GreenTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_GreenTask */
void GreenTask(void const * argument)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GreenTask */
  /* Infinite loop */
  for(;;)
  {
	  GreenFlag = 1;
 8000474:	4b11      	ldr	r3, [pc, #68]	@ (80004bc <GreenTask+0x50>)
 8000476:	2201      	movs	r2, #1
 8000478:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, HIGH);
 800047a:	2200      	movs	r2, #0
 800047c:	2101      	movs	r1, #1
 800047e:	4810      	ldr	r0, [pc, #64]	@ (80004c0 <GreenTask+0x54>)
 8000480:	f000 fbfe 	bl	8000c80 <HAL_GPIO_WritePin>

	        // Masuk critical section
	        osSemaphoreWait(CriticalResourceSemaphoreHandle, osWaitForever);
 8000484:	4b0f      	ldr	r3, [pc, #60]	@ (80004c4 <GreenTask+0x58>)
 8000486:	681b      	ldr	r3, [r3, #0]
 8000488:	f04f 31ff 	mov.w	r1, #4294967295
 800048c:	4618      	mov	r0, r3
 800048e:	f001 fb41 	bl	8001b14 <osSemaphoreWait>
	        AccessSharedData(); // Fungsi yang menggunakan resource bersama
 8000492:	f7ff ffc1 	bl	8000418 <AccessSharedData>
	        osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 8000496:	4b0b      	ldr	r3, [pc, #44]	@ (80004c4 <GreenTask+0x58>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	4618      	mov	r0, r3
 800049c:	f001 fb88 	bl	8001bb0 <osSemaphoreRelease>


	        HAL_GPIO_WritePin(led1_GPIO_Port, led1_Pin, LOW);
 80004a0:	2201      	movs	r2, #1
 80004a2:	2101      	movs	r1, #1
 80004a4:	4806      	ldr	r0, [pc, #24]	@ (80004c0 <GreenTask+0x54>)
 80004a6:	f000 fbeb 	bl	8000c80 <HAL_GPIO_WritePin>
	        GreenFlag = 0;
 80004aa:	4b04      	ldr	r3, [pc, #16]	@ (80004bc <GreenTask+0x50>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	701a      	strb	r2, [r3, #0]

	        osDelay(400); // Delay untuk simulasi
 80004b0:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 80004b4:	f001 fae7 	bl	8001a86 <osDelay>
	  GreenFlag = 1;
 80004b8:	bf00      	nop
 80004ba:	e7db      	b.n	8000474 <GreenTask+0x8>
 80004bc:	200002da 	.word	0x200002da
 80004c0:	40010800 	.word	0x40010800
 80004c4:	200002dc 	.word	0x200002dc

080004c8 <RedTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_RedTask */
void RedTask(void const * argument)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN RedTask */
  /* Infinite loop */
  for(;;)
  {
	  RedFlag = 1;
 80004d0:	4b11      	ldr	r3, [pc, #68]	@ (8000518 <RedTask+0x50>)
 80004d2:	2201      	movs	r2, #1
 80004d4:	701a      	strb	r2, [r3, #0]
	        HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, HIGH);
 80004d6:	2200      	movs	r2, #0
 80004d8:	2102      	movs	r1, #2
 80004da:	4810      	ldr	r0, [pc, #64]	@ (800051c <RedTask+0x54>)
 80004dc:	f000 fbd0 	bl	8000c80 <HAL_GPIO_WritePin>

	        // Masuk critical section
	        osSemaphoreWait(CriticalResourceSemaphoreHandle, osWaitForever);
 80004e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000520 <RedTask+0x58>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	f04f 31ff 	mov.w	r1, #4294967295
 80004e8:	4618      	mov	r0, r3
 80004ea:	f001 fb13 	bl	8001b14 <osSemaphoreWait>
	        AccessSharedData(); // Fungsi yang menggunakan resource bersama
 80004ee:	f7ff ff93 	bl	8000418 <AccessSharedData>
	        osSemaphoreRelease(CriticalResourceSemaphoreHandle);
 80004f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000520 <RedTask+0x58>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	4618      	mov	r0, r3
 80004f8:	f001 fb5a 	bl	8001bb0 <osSemaphoreRelease>

	        HAL_GPIO_WritePin(led2_GPIO_Port, led2_Pin, LOW);
 80004fc:	2201      	movs	r2, #1
 80004fe:	2102      	movs	r1, #2
 8000500:	4806      	ldr	r0, [pc, #24]	@ (800051c <RedTask+0x54>)
 8000502:	f000 fbbd 	bl	8000c80 <HAL_GPIO_WritePin>
	        RedFlag = 0;
 8000506:	4b04      	ldr	r3, [pc, #16]	@ (8000518 <RedTask+0x50>)
 8000508:	2200      	movs	r2, #0
 800050a:	701a      	strb	r2, [r3, #0]

	        osDelay(450); // Delay untuk simulasi
 800050c:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 8000510:	f001 fab9 	bl	8001a86 <osDelay>
	  RedFlag = 1;
 8000514:	bf00      	nop
 8000516:	e7db      	b.n	80004d0 <RedTask+0x8>
 8000518:	200002d9 	.word	0x200002d9
 800051c:	40010800 	.word	0x40010800
 8000520:	200002dc 	.word	0x200002dc

08000524 <OrangeTask>:
* @retval None
*/

/* USER CODE END Header_OrangeTask */
void OrangeTask(void const * argument)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b082      	sub	sp, #8
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OrangeTask */
  /* Infinite loop */
  for(;;)
  {
	  HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 800052c:	2108      	movs	r1, #8
 800052e:	4804      	ldr	r0, [pc, #16]	@ (8000540 <OrangeTask+0x1c>)
 8000530:	f000 fbbe 	bl	8000cb0 <HAL_GPIO_TogglePin>
	  osDelay(50);
 8000534:	2032      	movs	r0, #50	@ 0x32
 8000536:	f001 faa6 	bl	8001a86 <osDelay>
	  HAL_GPIO_TogglePin(led4_GPIO_Port, led4_Pin);
 800053a:	bf00      	nop
 800053c:	e7f6      	b.n	800052c <OrangeTask+0x8>
 800053e:	bf00      	nop
 8000540:	40010800 	.word	0x40010800

08000544 <Error_Handler>:
    HAL_IncTick();
  }
}

void Error_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000548:	b672      	cpsid	i
}
 800054a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <Error_Handler+0x8>

08000550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b084      	sub	sp, #16
 8000554:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000556:	4b18      	ldr	r3, [pc, #96]	@ (80005b8 <HAL_MspInit+0x68>)
 8000558:	699b      	ldr	r3, [r3, #24]
 800055a:	4a17      	ldr	r2, [pc, #92]	@ (80005b8 <HAL_MspInit+0x68>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	6193      	str	r3, [r2, #24]
 8000562:	4b15      	ldr	r3, [pc, #84]	@ (80005b8 <HAL_MspInit+0x68>)
 8000564:	699b      	ldr	r3, [r3, #24]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	60bb      	str	r3, [r7, #8]
 800056c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800056e:	4b12      	ldr	r3, [pc, #72]	@ (80005b8 <HAL_MspInit+0x68>)
 8000570:	69db      	ldr	r3, [r3, #28]
 8000572:	4a11      	ldr	r2, [pc, #68]	@ (80005b8 <HAL_MspInit+0x68>)
 8000574:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000578:	61d3      	str	r3, [r2, #28]
 800057a:	4b0f      	ldr	r3, [pc, #60]	@ (80005b8 <HAL_MspInit+0x68>)
 800057c:	69db      	ldr	r3, [r3, #28]
 800057e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000586:	2200      	movs	r2, #0
 8000588:	210f      	movs	r1, #15
 800058a:	f06f 0001 	mvn.w	r0, #1
 800058e:	f000 f9ca 	bl	8000926 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000592:	4b0a      	ldr	r3, [pc, #40]	@ (80005bc <HAL_MspInit+0x6c>)
 8000594:	685b      	ldr	r3, [r3, #4]
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80005a6:	60fb      	str	r3, [r7, #12]
 80005a8:	4a04      	ldr	r2, [pc, #16]	@ (80005bc <HAL_MspInit+0x6c>)
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005ae:	bf00      	nop
 80005b0:	3710      	adds	r7, #16
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000
 80005bc:	40010000 	.word	0x40010000

080005c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a09      	ldr	r2, [pc, #36]	@ (80005f4 <HAL_TIM_Base_MspInit+0x34>)
 80005ce:	4293      	cmp	r3, r2
 80005d0:	d10b      	bne.n	80005ea <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80005d2:	4b09      	ldr	r3, [pc, #36]	@ (80005f8 <HAL_TIM_Base_MspInit+0x38>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a08      	ldr	r2, [pc, #32]	@ (80005f8 <HAL_TIM_Base_MspInit+0x38>)
 80005d8:	f043 0304 	orr.w	r3, r3, #4
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <HAL_TIM_Base_MspInit+0x38>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 0304 	and.w	r3, r3, #4
 80005e6:	60fb      	str	r3, [r7, #12]
 80005e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM4_MspInit 1 */

  }

}
 80005ea:	bf00      	nop
 80005ec:	3714      	adds	r7, #20
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bc80      	pop	{r7}
 80005f2:	4770      	bx	lr
 80005f4:	40000800 	.word	0x40000800
 80005f8:	40021000 	.word	0x40021000

080005fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <NMI_Handler+0x4>

08000604 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000608:	bf00      	nop
 800060a:	e7fd      	b.n	8000608 <HardFault_Handler+0x4>

0800060c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800060c:	b480      	push	{r7}
 800060e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000610:	bf00      	nop
 8000612:	e7fd      	b.n	8000610 <MemManage_Handler+0x4>

08000614 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000618:	bf00      	nop
 800061a:	e7fd      	b.n	8000618 <BusFault_Handler+0x4>

0800061c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <UsageFault_Handler+0x4>

08000624 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000628:	bf00      	nop
 800062a:	46bd      	mov	sp, r7
 800062c:	bc80      	pop	{r7}
 800062e:	4770      	bx	lr

08000630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000634:	f000 f87c 	bl	8000730 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000638:	f002 ff04 	bl	8003444 <xTaskGetSchedulerState>
 800063c:	4603      	mov	r3, r0
 800063e:	2b01      	cmp	r3, #1
 8000640:	d001      	beq.n	8000646 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000642:	f003 fa91 	bl	8003b68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000646:	bf00      	nop
 8000648:	bd80      	pop	{r7, pc}

0800064a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800064a:	b480      	push	{r7}
 800064c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800064e:	bf00      	nop
 8000650:	46bd      	mov	sp, r7
 8000652:	bc80      	pop	{r7}
 8000654:	4770      	bx	lr
	...

08000658 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000658:	f7ff fff7 	bl	800064a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800065c:	480b      	ldr	r0, [pc, #44]	@ (800068c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800065e:	490c      	ldr	r1, [pc, #48]	@ (8000690 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000660:	4a0c      	ldr	r2, [pc, #48]	@ (8000694 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000664:	e002      	b.n	800066c <LoopCopyDataInit>

08000666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800066a:	3304      	adds	r3, #4

0800066c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800066c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800066e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000670:	d3f9      	bcc.n	8000666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000672:	4a09      	ldr	r2, [pc, #36]	@ (8000698 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000674:	4c09      	ldr	r4, [pc, #36]	@ (800069c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000678:	e001      	b.n	800067e <LoopFillZerobss>

0800067a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800067a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800067c:	3204      	adds	r2, #4

0800067e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800067e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000680:	d3fb      	bcc.n	800067a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000682:	f003 fce9 	bl	8004058 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000686:	f7ff fd7b 	bl	8000180 <main>
  bx lr
 800068a:	4770      	bx	lr
  ldr r0, =_sdata
 800068c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000690:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000694:	080041bc 	.word	0x080041bc
  ldr r2, =_sbss
 8000698:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 800069c:	20001038 	.word	0x20001038

080006a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006a0:	e7fe      	b.n	80006a0 <ADC1_2_IRQHandler>
	...

080006a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80006a8:	4b08      	ldr	r3, [pc, #32]	@ (80006cc <HAL_Init+0x28>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a07      	ldr	r2, [pc, #28]	@ (80006cc <HAL_Init+0x28>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80006b4:	2003      	movs	r0, #3
 80006b6:	f000 f92b 	bl	8000910 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80006ba:	200f      	movs	r0, #15
 80006bc:	f000 f808 	bl	80006d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80006c0:	f7ff ff46 	bl	8000550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006c4:	2300      	movs	r3, #0
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40022000 	.word	0x40022000

080006d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006d8:	4b12      	ldr	r3, [pc, #72]	@ (8000724 <HAL_InitTick+0x54>)
 80006da:	681a      	ldr	r2, [r3, #0]
 80006dc:	4b12      	ldr	r3, [pc, #72]	@ (8000728 <HAL_InitTick+0x58>)
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	4619      	mov	r1, r3
 80006e2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ee:	4618      	mov	r0, r3
 80006f0:	f000 f935 	bl	800095e <HAL_SYSTICK_Config>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e00e      	b.n	800071c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	2b0f      	cmp	r3, #15
 8000702:	d80a      	bhi.n	800071a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000704:	2200      	movs	r2, #0
 8000706:	6879      	ldr	r1, [r7, #4]
 8000708:	f04f 30ff 	mov.w	r0, #4294967295
 800070c:	f000 f90b 	bl	8000926 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000710:	4a06      	ldr	r2, [pc, #24]	@ (800072c <HAL_InitTick+0x5c>)
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000716:	2300      	movs	r3, #0
 8000718:	e000      	b.n	800071c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800071a:	2301      	movs	r3, #1
}
 800071c:	4618      	mov	r0, r3
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}
 8000724:	20000000 	.word	0x20000000
 8000728:	20000008 	.word	0x20000008
 800072c:	20000004 	.word	0x20000004

08000730 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000734:	4b05      	ldr	r3, [pc, #20]	@ (800074c <HAL_IncTick+0x1c>)
 8000736:	781b      	ldrb	r3, [r3, #0]
 8000738:	461a      	mov	r2, r3
 800073a:	4b05      	ldr	r3, [pc, #20]	@ (8000750 <HAL_IncTick+0x20>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4413      	add	r3, r2
 8000740:	4a03      	ldr	r2, [pc, #12]	@ (8000750 <HAL_IncTick+0x20>)
 8000742:	6013      	str	r3, [r2, #0]
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr
 800074c:	20000008 	.word	0x20000008
 8000750:	200002e0 	.word	0x200002e0

08000754 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  return uwTick;
 8000758:	4b02      	ldr	r3, [pc, #8]	@ (8000764 <HAL_GetTick+0x10>)
 800075a:	681b      	ldr	r3, [r3, #0]
}
 800075c:	4618      	mov	r0, r3
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr
 8000764:	200002e0 	.word	0x200002e0

08000768 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b084      	sub	sp, #16
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000770:	f7ff fff0 	bl	8000754 <HAL_GetTick>
 8000774:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000780:	d005      	beq.n	800078e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000782:	4b0a      	ldr	r3, [pc, #40]	@ (80007ac <HAL_Delay+0x44>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	461a      	mov	r2, r3
 8000788:	68fb      	ldr	r3, [r7, #12]
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800078e:	bf00      	nop
 8000790:	f7ff ffe0 	bl	8000754 <HAL_GetTick>
 8000794:	4602      	mov	r2, r0
 8000796:	68bb      	ldr	r3, [r7, #8]
 8000798:	1ad3      	subs	r3, r2, r3
 800079a:	68fa      	ldr	r2, [r7, #12]
 800079c:	429a      	cmp	r2, r3
 800079e:	d8f7      	bhi.n	8000790 <HAL_Delay+0x28>
  {
  }
}
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	20000008 	.word	0x20000008

080007b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80007c0:	4b0c      	ldr	r3, [pc, #48]	@ (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007c2:	68db      	ldr	r3, [r3, #12]
 80007c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007c6:	68ba      	ldr	r2, [r7, #8]
 80007c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80007cc:	4013      	ands	r3, r2
 80007ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80007d0:	68fb      	ldr	r3, [r7, #12]
 80007d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007d4:	68bb      	ldr	r3, [r7, #8]
 80007d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80007dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80007e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007e2:	4a04      	ldr	r2, [pc, #16]	@ (80007f4 <__NVIC_SetPriorityGrouping+0x44>)
 80007e4:	68bb      	ldr	r3, [r7, #8]
 80007e6:	60d3      	str	r3, [r2, #12]
}
 80007e8:	bf00      	nop
 80007ea:	3714      	adds	r7, #20
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bc80      	pop	{r7}
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	e000ed00 	.word	0xe000ed00

080007f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007fc:	4b04      	ldr	r3, [pc, #16]	@ (8000810 <__NVIC_GetPriorityGrouping+0x18>)
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	0a1b      	lsrs	r3, r3, #8
 8000802:	f003 0307 	and.w	r3, r3, #7
}
 8000806:	4618      	mov	r0, r3
 8000808:	46bd      	mov	sp, r7
 800080a:	bc80      	pop	{r7}
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop
 8000810:	e000ed00 	.word	0xe000ed00

08000814 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
 800081a:	4603      	mov	r3, r0
 800081c:	6039      	str	r1, [r7, #0]
 800081e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000820:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000824:	2b00      	cmp	r3, #0
 8000826:	db0a      	blt.n	800083e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	b2da      	uxtb	r2, r3
 800082c:	490c      	ldr	r1, [pc, #48]	@ (8000860 <__NVIC_SetPriority+0x4c>)
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	0112      	lsls	r2, r2, #4
 8000834:	b2d2      	uxtb	r2, r2
 8000836:	440b      	add	r3, r1
 8000838:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800083c:	e00a      	b.n	8000854 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800083e:	683b      	ldr	r3, [r7, #0]
 8000840:	b2da      	uxtb	r2, r3
 8000842:	4908      	ldr	r1, [pc, #32]	@ (8000864 <__NVIC_SetPriority+0x50>)
 8000844:	79fb      	ldrb	r3, [r7, #7]
 8000846:	f003 030f 	and.w	r3, r3, #15
 800084a:	3b04      	subs	r3, #4
 800084c:	0112      	lsls	r2, r2, #4
 800084e:	b2d2      	uxtb	r2, r2
 8000850:	440b      	add	r3, r1
 8000852:	761a      	strb	r2, [r3, #24]
}
 8000854:	bf00      	nop
 8000856:	370c      	adds	r7, #12
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	e000e100 	.word	0xe000e100
 8000864:	e000ed00 	.word	0xe000ed00

08000868 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000868:	b480      	push	{r7}
 800086a:	b089      	sub	sp, #36	@ 0x24
 800086c:	af00      	add	r7, sp, #0
 800086e:	60f8      	str	r0, [r7, #12]
 8000870:	60b9      	str	r1, [r7, #8]
 8000872:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000874:	68fb      	ldr	r3, [r7, #12]
 8000876:	f003 0307 	and.w	r3, r3, #7
 800087a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800087c:	69fb      	ldr	r3, [r7, #28]
 800087e:	f1c3 0307 	rsb	r3, r3, #7
 8000882:	2b04      	cmp	r3, #4
 8000884:	bf28      	it	cs
 8000886:	2304      	movcs	r3, #4
 8000888:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800088a:	69fb      	ldr	r3, [r7, #28]
 800088c:	3304      	adds	r3, #4
 800088e:	2b06      	cmp	r3, #6
 8000890:	d902      	bls.n	8000898 <NVIC_EncodePriority+0x30>
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	3b03      	subs	r3, #3
 8000896:	e000      	b.n	800089a <NVIC_EncodePriority+0x32>
 8000898:	2300      	movs	r3, #0
 800089a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	f04f 32ff 	mov.w	r2, #4294967295
 80008a0:	69bb      	ldr	r3, [r7, #24]
 80008a2:	fa02 f303 	lsl.w	r3, r2, r3
 80008a6:	43da      	mvns	r2, r3
 80008a8:	68bb      	ldr	r3, [r7, #8]
 80008aa:	401a      	ands	r2, r3
 80008ac:	697b      	ldr	r3, [r7, #20]
 80008ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80008b0:	f04f 31ff 	mov.w	r1, #4294967295
 80008b4:	697b      	ldr	r3, [r7, #20]
 80008b6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ba:	43d9      	mvns	r1, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80008c0:	4313      	orrs	r3, r2
         );
}
 80008c2:	4618      	mov	r0, r3
 80008c4:	3724      	adds	r7, #36	@ 0x24
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bc80      	pop	{r7}
 80008ca:	4770      	bx	lr

080008cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	3b01      	subs	r3, #1
 80008d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80008dc:	d301      	bcc.n	80008e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008de:	2301      	movs	r3, #1
 80008e0:	e00f      	b.n	8000902 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008e2:	4a0a      	ldr	r2, [pc, #40]	@ (800090c <SysTick_Config+0x40>)
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	3b01      	subs	r3, #1
 80008e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ea:	210f      	movs	r1, #15
 80008ec:	f04f 30ff 	mov.w	r0, #4294967295
 80008f0:	f7ff ff90 	bl	8000814 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <SysTick_Config+0x40>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008fa:	4b04      	ldr	r3, [pc, #16]	@ (800090c <SysTick_Config+0x40>)
 80008fc:	2207      	movs	r2, #7
 80008fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000900:	2300      	movs	r3, #0
}
 8000902:	4618      	mov	r0, r3
 8000904:	3708      	adds	r7, #8
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	e000e010 	.word	0xe000e010

08000910 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff ff49 	bl	80007b0 <__NVIC_SetPriorityGrouping>
}
 800091e:	bf00      	nop
 8000920:	3708      	adds	r7, #8
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000926:	b580      	push	{r7, lr}
 8000928:	b086      	sub	sp, #24
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	60b9      	str	r1, [r7, #8]
 8000930:	607a      	str	r2, [r7, #4]
 8000932:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000938:	f7ff ff5e 	bl	80007f8 <__NVIC_GetPriorityGrouping>
 800093c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68b9      	ldr	r1, [r7, #8]
 8000942:	6978      	ldr	r0, [r7, #20]
 8000944:	f7ff ff90 	bl	8000868 <NVIC_EncodePriority>
 8000948:	4602      	mov	r2, r0
 800094a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800094e:	4611      	mov	r1, r2
 8000950:	4618      	mov	r0, r3
 8000952:	f7ff ff5f 	bl	8000814 <__NVIC_SetPriority>
}
 8000956:	bf00      	nop
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}

0800095e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	b082      	sub	sp, #8
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f7ff ffb0 	bl	80008cc <SysTick_Config>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000978:	b480      	push	{r7}
 800097a:	b08b      	sub	sp, #44	@ 0x2c
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000986:	2300      	movs	r3, #0
 8000988:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800098a:	e169      	b.n	8000c60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800098c:	2201      	movs	r2, #1
 800098e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000990:	fa02 f303 	lsl.w	r3, r2, r3
 8000994:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	69fa      	ldr	r2, [r7, #28]
 800099c:	4013      	ands	r3, r2
 800099e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	69fb      	ldr	r3, [r7, #28]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	f040 8158 	bne.w	8000c5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	4a9a      	ldr	r2, [pc, #616]	@ (8000c18 <HAL_GPIO_Init+0x2a0>)
 80009b0:	4293      	cmp	r3, r2
 80009b2:	d05e      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 80009b4:	4a98      	ldr	r2, [pc, #608]	@ (8000c18 <HAL_GPIO_Init+0x2a0>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d875      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009ba:	4a98      	ldr	r2, [pc, #608]	@ (8000c1c <HAL_GPIO_Init+0x2a4>)
 80009bc:	4293      	cmp	r3, r2
 80009be:	d058      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 80009c0:	4a96      	ldr	r2, [pc, #600]	@ (8000c1c <HAL_GPIO_Init+0x2a4>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d86f      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009c6:	4a96      	ldr	r2, [pc, #600]	@ (8000c20 <HAL_GPIO_Init+0x2a8>)
 80009c8:	4293      	cmp	r3, r2
 80009ca:	d052      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 80009cc:	4a94      	ldr	r2, [pc, #592]	@ (8000c20 <HAL_GPIO_Init+0x2a8>)
 80009ce:	4293      	cmp	r3, r2
 80009d0:	d869      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009d2:	4a94      	ldr	r2, [pc, #592]	@ (8000c24 <HAL_GPIO_Init+0x2ac>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d04c      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 80009d8:	4a92      	ldr	r2, [pc, #584]	@ (8000c24 <HAL_GPIO_Init+0x2ac>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d863      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009de:	4a92      	ldr	r2, [pc, #584]	@ (8000c28 <HAL_GPIO_Init+0x2b0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d046      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
 80009e4:	4a90      	ldr	r2, [pc, #576]	@ (8000c28 <HAL_GPIO_Init+0x2b0>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d85d      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009ea:	2b12      	cmp	r3, #18
 80009ec:	d82a      	bhi.n	8000a44 <HAL_GPIO_Init+0xcc>
 80009ee:	2b12      	cmp	r3, #18
 80009f0:	d859      	bhi.n	8000aa6 <HAL_GPIO_Init+0x12e>
 80009f2:	a201      	add	r2, pc, #4	@ (adr r2, 80009f8 <HAL_GPIO_Init+0x80>)
 80009f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009f8:	08000a73 	.word	0x08000a73
 80009fc:	08000a4d 	.word	0x08000a4d
 8000a00:	08000a5f 	.word	0x08000a5f
 8000a04:	08000aa1 	.word	0x08000aa1
 8000a08:	08000aa7 	.word	0x08000aa7
 8000a0c:	08000aa7 	.word	0x08000aa7
 8000a10:	08000aa7 	.word	0x08000aa7
 8000a14:	08000aa7 	.word	0x08000aa7
 8000a18:	08000aa7 	.word	0x08000aa7
 8000a1c:	08000aa7 	.word	0x08000aa7
 8000a20:	08000aa7 	.word	0x08000aa7
 8000a24:	08000aa7 	.word	0x08000aa7
 8000a28:	08000aa7 	.word	0x08000aa7
 8000a2c:	08000aa7 	.word	0x08000aa7
 8000a30:	08000aa7 	.word	0x08000aa7
 8000a34:	08000aa7 	.word	0x08000aa7
 8000a38:	08000aa7 	.word	0x08000aa7
 8000a3c:	08000a55 	.word	0x08000a55
 8000a40:	08000a69 	.word	0x08000a69
 8000a44:	4a79      	ldr	r2, [pc, #484]	@ (8000c2c <HAL_GPIO_Init+0x2b4>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d013      	beq.n	8000a72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000a4a:	e02c      	b.n	8000aa6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	623b      	str	r3, [r7, #32]
          break;
 8000a52:	e029      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000a54:	683b      	ldr	r3, [r7, #0]
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	3304      	adds	r3, #4
 8000a5a:	623b      	str	r3, [r7, #32]
          break;
 8000a5c:	e024      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	68db      	ldr	r3, [r3, #12]
 8000a62:	3308      	adds	r3, #8
 8000a64:	623b      	str	r3, [r7, #32]
          break;
 8000a66:	e01f      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000a68:	683b      	ldr	r3, [r7, #0]
 8000a6a:	68db      	ldr	r3, [r3, #12]
 8000a6c:	330c      	adds	r3, #12
 8000a6e:	623b      	str	r3, [r7, #32]
          break;
 8000a70:	e01a      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d102      	bne.n	8000a80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	623b      	str	r3, [r7, #32]
          break;
 8000a7e:	e013      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	689b      	ldr	r3, [r3, #8]
 8000a84:	2b01      	cmp	r3, #1
 8000a86:	d105      	bne.n	8000a94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a88:	2308      	movs	r3, #8
 8000a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	69fa      	ldr	r2, [r7, #28]
 8000a90:	611a      	str	r2, [r3, #16]
          break;
 8000a92:	e009      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000a94:	2308      	movs	r3, #8
 8000a96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	69fa      	ldr	r2, [r7, #28]
 8000a9c:	615a      	str	r2, [r3, #20]
          break;
 8000a9e:	e003      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	623b      	str	r3, [r7, #32]
          break;
 8000aa4:	e000      	b.n	8000aa8 <HAL_GPIO_Init+0x130>
          break;
 8000aa6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	2bff      	cmp	r3, #255	@ 0xff
 8000aac:	d801      	bhi.n	8000ab2 <HAL_GPIO_Init+0x13a>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	e001      	b.n	8000ab6 <HAL_GPIO_Init+0x13e>
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3304      	adds	r3, #4
 8000ab6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	2bff      	cmp	r3, #255	@ 0xff
 8000abc:	d802      	bhi.n	8000ac4 <HAL_GPIO_Init+0x14c>
 8000abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	e002      	b.n	8000aca <HAL_GPIO_Init+0x152>
 8000ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ac6:	3b08      	subs	r3, #8
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	681a      	ldr	r2, [r3, #0]
 8000ad0:	210f      	movs	r1, #15
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad8:	43db      	mvns	r3, r3
 8000ada:	401a      	ands	r2, r3
 8000adc:	6a39      	ldr	r1, [r7, #32]
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ae4:	431a      	orrs	r2, r3
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	f000 80b1 	beq.w	8000c5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000af8:	4b4d      	ldr	r3, [pc, #308]	@ (8000c30 <HAL_GPIO_Init+0x2b8>)
 8000afa:	699b      	ldr	r3, [r3, #24]
 8000afc:	4a4c      	ldr	r2, [pc, #304]	@ (8000c30 <HAL_GPIO_Init+0x2b8>)
 8000afe:	f043 0301 	orr.w	r3, r3, #1
 8000b02:	6193      	str	r3, [r2, #24]
 8000b04:	4b4a      	ldr	r3, [pc, #296]	@ (8000c30 <HAL_GPIO_Init+0x2b8>)
 8000b06:	699b      	ldr	r3, [r3, #24]
 8000b08:	f003 0301 	and.w	r3, r3, #1
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000b10:	4a48      	ldr	r2, [pc, #288]	@ (8000c34 <HAL_GPIO_Init+0x2bc>)
 8000b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b14:	089b      	lsrs	r3, r3, #2
 8000b16:	3302      	adds	r3, #2
 8000b18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b20:	f003 0303 	and.w	r3, r3, #3
 8000b24:	009b      	lsls	r3, r3, #2
 8000b26:	220f      	movs	r2, #15
 8000b28:	fa02 f303 	lsl.w	r3, r2, r3
 8000b2c:	43db      	mvns	r3, r3
 8000b2e:	68fa      	ldr	r2, [r7, #12]
 8000b30:	4013      	ands	r3, r2
 8000b32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a40      	ldr	r2, [pc, #256]	@ (8000c38 <HAL_GPIO_Init+0x2c0>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d013      	beq.n	8000b64 <HAL_GPIO_Init+0x1ec>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a3f      	ldr	r2, [pc, #252]	@ (8000c3c <HAL_GPIO_Init+0x2c4>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d00d      	beq.n	8000b60 <HAL_GPIO_Init+0x1e8>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a3e      	ldr	r2, [pc, #248]	@ (8000c40 <HAL_GPIO_Init+0x2c8>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d007      	beq.n	8000b5c <HAL_GPIO_Init+0x1e4>
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4a3d      	ldr	r2, [pc, #244]	@ (8000c44 <HAL_GPIO_Init+0x2cc>)
 8000b50:	4293      	cmp	r3, r2
 8000b52:	d101      	bne.n	8000b58 <HAL_GPIO_Init+0x1e0>
 8000b54:	2303      	movs	r3, #3
 8000b56:	e006      	b.n	8000b66 <HAL_GPIO_Init+0x1ee>
 8000b58:	2304      	movs	r3, #4
 8000b5a:	e004      	b.n	8000b66 <HAL_GPIO_Init+0x1ee>
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e002      	b.n	8000b66 <HAL_GPIO_Init+0x1ee>
 8000b60:	2301      	movs	r3, #1
 8000b62:	e000      	b.n	8000b66 <HAL_GPIO_Init+0x1ee>
 8000b64:	2300      	movs	r3, #0
 8000b66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b68:	f002 0203 	and.w	r2, r2, #3
 8000b6c:	0092      	lsls	r2, r2, #2
 8000b6e:	4093      	lsls	r3, r2
 8000b70:	68fa      	ldr	r2, [r7, #12]
 8000b72:	4313      	orrs	r3, r2
 8000b74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000b76:	492f      	ldr	r1, [pc, #188]	@ (8000c34 <HAL_GPIO_Init+0x2bc>)
 8000b78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b7a:	089b      	lsrs	r3, r3, #2
 8000b7c:	3302      	adds	r3, #2
 8000b7e:	68fa      	ldr	r2, [r7, #12]
 8000b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	685b      	ldr	r3, [r3, #4]
 8000b88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d006      	beq.n	8000b9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000b90:	4b2d      	ldr	r3, [pc, #180]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000b92:	689a      	ldr	r2, [r3, #8]
 8000b94:	492c      	ldr	r1, [pc, #176]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000b96:	69bb      	ldr	r3, [r7, #24]
 8000b98:	4313      	orrs	r3, r2
 8000b9a:	608b      	str	r3, [r1, #8]
 8000b9c:	e006      	b.n	8000bac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000b9e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000ba0:	689a      	ldr	r2, [r3, #8]
 8000ba2:	69bb      	ldr	r3, [r7, #24]
 8000ba4:	43db      	mvns	r3, r3
 8000ba6:	4928      	ldr	r1, [pc, #160]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000ba8:	4013      	ands	r3, r2
 8000baa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d006      	beq.n	8000bc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000bb8:	4b23      	ldr	r3, [pc, #140]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bba:	68da      	ldr	r2, [r3, #12]
 8000bbc:	4922      	ldr	r1, [pc, #136]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	4313      	orrs	r3, r2
 8000bc2:	60cb      	str	r3, [r1, #12]
 8000bc4:	e006      	b.n	8000bd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000bc6:	4b20      	ldr	r3, [pc, #128]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bc8:	68da      	ldr	r2, [r3, #12]
 8000bca:	69bb      	ldr	r3, [r7, #24]
 8000bcc:	43db      	mvns	r3, r3
 8000bce:	491e      	ldr	r1, [pc, #120]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bd0:	4013      	ands	r3, r2
 8000bd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d006      	beq.n	8000bee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000be0:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000be2:	685a      	ldr	r2, [r3, #4]
 8000be4:	4918      	ldr	r1, [pc, #96]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000be6:	69bb      	ldr	r3, [r7, #24]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	604b      	str	r3, [r1, #4]
 8000bec:	e006      	b.n	8000bfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000bee:	4b16      	ldr	r3, [pc, #88]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bf0:	685a      	ldr	r2, [r3, #4]
 8000bf2:	69bb      	ldr	r3, [r7, #24]
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	4914      	ldr	r1, [pc, #80]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d021      	beq.n	8000c4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c08:	4b0f      	ldr	r3, [pc, #60]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	490e      	ldr	r1, [pc, #56]	@ (8000c48 <HAL_GPIO_Init+0x2d0>)
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	600b      	str	r3, [r1, #0]
 8000c14:	e021      	b.n	8000c5a <HAL_GPIO_Init+0x2e2>
 8000c16:	bf00      	nop
 8000c18:	10320000 	.word	0x10320000
 8000c1c:	10310000 	.word	0x10310000
 8000c20:	10220000 	.word	0x10220000
 8000c24:	10210000 	.word	0x10210000
 8000c28:	10120000 	.word	0x10120000
 8000c2c:	10110000 	.word	0x10110000
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010000 	.word	0x40010000
 8000c38:	40010800 	.word	0x40010800
 8000c3c:	40010c00 	.word	0x40010c00
 8000c40:	40011000 	.word	0x40011000
 8000c44:	40011400 	.word	0x40011400
 8000c48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	69bb      	ldr	r3, [r7, #24]
 8000c52:	43db      	mvns	r3, r3
 8000c54:	4909      	ldr	r1, [pc, #36]	@ (8000c7c <HAL_GPIO_Init+0x304>)
 8000c56:	4013      	ands	r3, r2
 8000c58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c66:	fa22 f303 	lsr.w	r3, r2, r3
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f47f ae8e 	bne.w	800098c <HAL_GPIO_Init+0x14>
  }
}
 8000c70:	bf00      	nop
 8000c72:	bf00      	nop
 8000c74:	372c      	adds	r7, #44	@ 0x2c
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bc80      	pop	{r7}
 8000c7a:	4770      	bx	lr
 8000c7c:	40010400 	.word	0x40010400

08000c80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c80:	b480      	push	{r7}
 8000c82:	b083      	sub	sp, #12
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
 8000c88:	460b      	mov	r3, r1
 8000c8a:	807b      	strh	r3, [r7, #2]
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000c90:	787b      	ldrb	r3, [r7, #1]
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d003      	beq.n	8000c9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000c96:	887a      	ldrh	r2, [r7, #2]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000c9c:	e003      	b.n	8000ca6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000c9e:	887b      	ldrh	r3, [r7, #2]
 8000ca0:	041a      	lsls	r2, r3, #16
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	611a      	str	r2, [r3, #16]
}
 8000ca6:	bf00      	nop
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
 8000cb8:	460b      	mov	r3, r1
 8000cba:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cc2:	887a      	ldrh	r2, [r7, #2]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	041a      	lsls	r2, r3, #16
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	43d9      	mvns	r1, r3
 8000cce:	887b      	ldrh	r3, [r7, #2]
 8000cd0:	400b      	ands	r3, r1
 8000cd2:	431a      	orrs	r2, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	611a      	str	r2, [r3, #16]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
	...

08000ce4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b086      	sub	sp, #24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d101      	bne.n	8000cf6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e272      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f000 8087 	beq.w	8000e12 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d04:	4b92      	ldr	r3, [pc, #584]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 030c 	and.w	r3, r3, #12
 8000d0c:	2b04      	cmp	r3, #4
 8000d0e:	d00c      	beq.n	8000d2a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d10:	4b8f      	ldr	r3, [pc, #572]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 030c 	and.w	r3, r3, #12
 8000d18:	2b08      	cmp	r3, #8
 8000d1a:	d112      	bne.n	8000d42 <HAL_RCC_OscConfig+0x5e>
 8000d1c:	4b8c      	ldr	r3, [pc, #560]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d28:	d10b      	bne.n	8000d42 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d2a:	4b89      	ldr	r3, [pc, #548]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d06c      	beq.n	8000e10 <HAL_RCC_OscConfig+0x12c>
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d168      	bne.n	8000e10 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e24c      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d4a:	d106      	bne.n	8000d5a <HAL_RCC_OscConfig+0x76>
 8000d4c:	4b80      	ldr	r3, [pc, #512]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a7f      	ldr	r2, [pc, #508]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d52:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d56:	6013      	str	r3, [r2, #0]
 8000d58:	e02e      	b.n	8000db8 <HAL_RCC_OscConfig+0xd4>
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	685b      	ldr	r3, [r3, #4]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d10c      	bne.n	8000d7c <HAL_RCC_OscConfig+0x98>
 8000d62:	4b7b      	ldr	r3, [pc, #492]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4a7a      	ldr	r2, [pc, #488]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000d6c:	6013      	str	r3, [r2, #0]
 8000d6e:	4b78      	ldr	r3, [pc, #480]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a77      	ldr	r2, [pc, #476]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d74:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000d78:	6013      	str	r3, [r2, #0]
 8000d7a:	e01d      	b.n	8000db8 <HAL_RCC_OscConfig+0xd4>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000d84:	d10c      	bne.n	8000da0 <HAL_RCC_OscConfig+0xbc>
 8000d86:	4b72      	ldr	r3, [pc, #456]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a71      	ldr	r2, [pc, #452]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d90:	6013      	str	r3, [r2, #0]
 8000d92:	4b6f      	ldr	r3, [pc, #444]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a6e      	ldr	r2, [pc, #440]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000d98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000d9c:	6013      	str	r3, [r2, #0]
 8000d9e:	e00b      	b.n	8000db8 <HAL_RCC_OscConfig+0xd4>
 8000da0:	4b6b      	ldr	r3, [pc, #428]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a6a      	ldr	r2, [pc, #424]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000daa:	6013      	str	r3, [r2, #0]
 8000dac:	4b68      	ldr	r3, [pc, #416]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a67      	ldr	r2, [pc, #412]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000db6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d013      	beq.n	8000de8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000dc0:	f7ff fcc8 	bl	8000754 <HAL_GetTick>
 8000dc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc6:	e008      	b.n	8000dda <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000dc8:	f7ff fcc4 	bl	8000754 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b64      	cmp	r3, #100	@ 0x64
 8000dd4:	d901      	bls.n	8000dda <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	e200      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dda:	4b5d      	ldr	r3, [pc, #372]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d0f0      	beq.n	8000dc8 <HAL_RCC_OscConfig+0xe4>
 8000de6:	e014      	b.n	8000e12 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000de8:	f7ff fcb4 	bl	8000754 <HAL_GetTick>
 8000dec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000dee:	e008      	b.n	8000e02 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000df0:	f7ff fcb0 	bl	8000754 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	693b      	ldr	r3, [r7, #16]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	2b64      	cmp	r3, #100	@ 0x64
 8000dfc:	d901      	bls.n	8000e02 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	e1ec      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e02:	4b53      	ldr	r3, [pc, #332]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d1f0      	bne.n	8000df0 <HAL_RCC_OscConfig+0x10c>
 8000e0e:	e000      	b.n	8000e12 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d063      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e1e:	4b4c      	ldr	r3, [pc, #304]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 030c 	and.w	r3, r3, #12
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d00b      	beq.n	8000e42 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e2a:	4b49      	ldr	r3, [pc, #292]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 030c 	and.w	r3, r3, #12
 8000e32:	2b08      	cmp	r3, #8
 8000e34:	d11c      	bne.n	8000e70 <HAL_RCC_OscConfig+0x18c>
 8000e36:	4b46      	ldr	r3, [pc, #280]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d116      	bne.n	8000e70 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e42:	4b43      	ldr	r3, [pc, #268]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f003 0302 	and.w	r3, r3, #2
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d005      	beq.n	8000e5a <HAL_RCC_OscConfig+0x176>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	691b      	ldr	r3, [r3, #16]
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d001      	beq.n	8000e5a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000e56:	2301      	movs	r3, #1
 8000e58:	e1c0      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5a:	4b3d      	ldr	r3, [pc, #244]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	695b      	ldr	r3, [r3, #20]
 8000e66:	00db      	lsls	r3, r3, #3
 8000e68:	4939      	ldr	r1, [pc, #228]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000e6e:	e03a      	b.n	8000ee6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	691b      	ldr	r3, [r3, #16]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d020      	beq.n	8000eba <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000e78:	4b36      	ldr	r3, [pc, #216]	@ (8000f54 <HAL_RCC_OscConfig+0x270>)
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fc69 	bl	8000754 <HAL_GetTick>
 8000e82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e84:	e008      	b.n	8000e98 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e86:	f7ff fc65 	bl	8000754 <HAL_GetTick>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	1ad3      	subs	r3, r2, r3
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d901      	bls.n	8000e98 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000e94:	2303      	movs	r3, #3
 8000e96:	e1a1      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e98:	4b2d      	ldr	r3, [pc, #180]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f003 0302 	and.w	r3, r3, #2
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d0f0      	beq.n	8000e86 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ea4:	4b2a      	ldr	r3, [pc, #168]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	695b      	ldr	r3, [r3, #20]
 8000eb0:	00db      	lsls	r3, r3, #3
 8000eb2:	4927      	ldr	r1, [pc, #156]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000eb4:	4313      	orrs	r3, r2
 8000eb6:	600b      	str	r3, [r1, #0]
 8000eb8:	e015      	b.n	8000ee6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000eba:	4b26      	ldr	r3, [pc, #152]	@ (8000f54 <HAL_RCC_OscConfig+0x270>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ec0:	f7ff fc48 	bl	8000754 <HAL_GetTick>
 8000ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec6:	e008      	b.n	8000eda <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ec8:	f7ff fc44 	bl	8000754 <HAL_GetTick>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	1ad3      	subs	r3, r2, r3
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d901      	bls.n	8000eda <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	e180      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000eda:	4b1d      	ldr	r3, [pc, #116]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	f003 0302 	and.w	r3, r3, #2
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d1f0      	bne.n	8000ec8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0308 	and.w	r3, r3, #8
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d03a      	beq.n	8000f68 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d019      	beq.n	8000f2e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000efa:	4b17      	ldr	r3, [pc, #92]	@ (8000f58 <HAL_RCC_OscConfig+0x274>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f00:	f7ff fc28 	bl	8000754 <HAL_GetTick>
 8000f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f06:	e008      	b.n	8000f1a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f08:	f7ff fc24 	bl	8000754 <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d901      	bls.n	8000f1a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f16:	2303      	movs	r3, #3
 8000f18:	e160      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f50 <HAL_RCC_OscConfig+0x26c>)
 8000f1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f1e:	f003 0302 	and.w	r3, r3, #2
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d0f0      	beq.n	8000f08 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f26:	2001      	movs	r0, #1
 8000f28:	f000 fa9c 	bl	8001464 <RCC_Delay>
 8000f2c:	e01c      	b.n	8000f68 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f58 <HAL_RCC_OscConfig+0x274>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f34:	f7ff fc0e 	bl	8000754 <HAL_GetTick>
 8000f38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f3a:	e00f      	b.n	8000f5c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f3c:	f7ff fc0a 	bl	8000754 <HAL_GetTick>
 8000f40:	4602      	mov	r2, r0
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	2b02      	cmp	r3, #2
 8000f48:	d908      	bls.n	8000f5c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000f4a:	2303      	movs	r3, #3
 8000f4c:	e146      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
 8000f4e:	bf00      	nop
 8000f50:	40021000 	.word	0x40021000
 8000f54:	42420000 	.word	0x42420000
 8000f58:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5c:	4b92      	ldr	r3, [pc, #584]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f60:	f003 0302 	and.w	r3, r3, #2
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d1e9      	bne.n	8000f3c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0304 	and.w	r3, r3, #4
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80a6 	beq.w	80010c2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f76:	2300      	movs	r3, #0
 8000f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f7a:	4b8b      	ldr	r3, [pc, #556]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f7c:	69db      	ldr	r3, [r3, #28]
 8000f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d10d      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f86:	4b88      	ldr	r3, [pc, #544]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f88:	69db      	ldr	r3, [r3, #28]
 8000f8a:	4a87      	ldr	r2, [pc, #540]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f90:	61d3      	str	r3, [r2, #28]
 8000f92:	4b85      	ldr	r3, [pc, #532]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000f94:	69db      	ldr	r3, [r3, #28]
 8000f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fa2:	4b82      	ldr	r3, [pc, #520]	@ (80011ac <HAL_RCC_OscConfig+0x4c8>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d118      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fae:	4b7f      	ldr	r3, [pc, #508]	@ (80011ac <HAL_RCC_OscConfig+0x4c8>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	4a7e      	ldr	r2, [pc, #504]	@ (80011ac <HAL_RCC_OscConfig+0x4c8>)
 8000fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000fba:	f7ff fbcb 	bl	8000754 <HAL_GetTick>
 8000fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fc0:	e008      	b.n	8000fd4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000fc2:	f7ff fbc7 	bl	8000754 <HAL_GetTick>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	1ad3      	subs	r3, r2, r3
 8000fcc:	2b64      	cmp	r3, #100	@ 0x64
 8000fce:	d901      	bls.n	8000fd4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000fd0:	2303      	movs	r3, #3
 8000fd2:	e103      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fd4:	4b75      	ldr	r3, [pc, #468]	@ (80011ac <HAL_RCC_OscConfig+0x4c8>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d0f0      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d106      	bne.n	8000ff6 <HAL_RCC_OscConfig+0x312>
 8000fe8:	4b6f      	ldr	r3, [pc, #444]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	4a6e      	ldr	r2, [pc, #440]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8000fee:	f043 0301 	orr.w	r3, r3, #1
 8000ff2:	6213      	str	r3, [r2, #32]
 8000ff4:	e02d      	b.n	8001052 <HAL_RCC_OscConfig+0x36e>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d10c      	bne.n	8001018 <HAL_RCC_OscConfig+0x334>
 8000ffe:	4b6a      	ldr	r3, [pc, #424]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001000:	6a1b      	ldr	r3, [r3, #32]
 8001002:	4a69      	ldr	r2, [pc, #420]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	f023 0301 	bic.w	r3, r3, #1
 8001008:	6213      	str	r3, [r2, #32]
 800100a:	4b67      	ldr	r3, [pc, #412]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800100c:	6a1b      	ldr	r3, [r3, #32]
 800100e:	4a66      	ldr	r2, [pc, #408]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001010:	f023 0304 	bic.w	r3, r3, #4
 8001014:	6213      	str	r3, [r2, #32]
 8001016:	e01c      	b.n	8001052 <HAL_RCC_OscConfig+0x36e>
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	68db      	ldr	r3, [r3, #12]
 800101c:	2b05      	cmp	r3, #5
 800101e:	d10c      	bne.n	800103a <HAL_RCC_OscConfig+0x356>
 8001020:	4b61      	ldr	r3, [pc, #388]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001022:	6a1b      	ldr	r3, [r3, #32]
 8001024:	4a60      	ldr	r2, [pc, #384]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001026:	f043 0304 	orr.w	r3, r3, #4
 800102a:	6213      	str	r3, [r2, #32]
 800102c:	4b5e      	ldr	r3, [pc, #376]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800102e:	6a1b      	ldr	r3, [r3, #32]
 8001030:	4a5d      	ldr	r2, [pc, #372]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001032:	f043 0301 	orr.w	r3, r3, #1
 8001036:	6213      	str	r3, [r2, #32]
 8001038:	e00b      	b.n	8001052 <HAL_RCC_OscConfig+0x36e>
 800103a:	4b5b      	ldr	r3, [pc, #364]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800103c:	6a1b      	ldr	r3, [r3, #32]
 800103e:	4a5a      	ldr	r2, [pc, #360]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001040:	f023 0301 	bic.w	r3, r3, #1
 8001044:	6213      	str	r3, [r2, #32]
 8001046:	4b58      	ldr	r3, [pc, #352]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4a57      	ldr	r2, [pc, #348]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800104c:	f023 0304 	bic.w	r3, r3, #4
 8001050:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	2b00      	cmp	r3, #0
 8001058:	d015      	beq.n	8001086 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800105a:	f7ff fb7b 	bl	8000754 <HAL_GetTick>
 800105e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001060:	e00a      	b.n	8001078 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001062:	f7ff fb77 	bl	8000754 <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001070:	4293      	cmp	r3, r2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e0b1      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001078:	4b4b      	ldr	r3, [pc, #300]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800107a:	6a1b      	ldr	r3, [r3, #32]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0ee      	beq.n	8001062 <HAL_RCC_OscConfig+0x37e>
 8001084:	e014      	b.n	80010b0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001086:	f7ff fb65 	bl	8000754 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800108c:	e00a      	b.n	80010a4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800108e:	f7ff fb61 	bl	8000754 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f241 3288 	movw	r2, #5000	@ 0x1388
 800109c:	4293      	cmp	r3, r2
 800109e:	d901      	bls.n	80010a4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80010a0:	2303      	movs	r3, #3
 80010a2:	e09b      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010a4:	4b40      	ldr	r3, [pc, #256]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 80010a6:	6a1b      	ldr	r3, [r3, #32]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1ee      	bne.n	800108e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80010b0:	7dfb      	ldrb	r3, [r7, #23]
 80010b2:	2b01      	cmp	r3, #1
 80010b4:	d105      	bne.n	80010c2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80010b6:	4b3c      	ldr	r3, [pc, #240]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a3b      	ldr	r2, [pc, #236]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 80010bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	f000 8087 	beq.w	80011da <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010cc:	4b36      	ldr	r3, [pc, #216]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 030c 	and.w	r3, r3, #12
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d061      	beq.n	800119c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	d146      	bne.n	800116e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80010e0:	4b33      	ldr	r3, [pc, #204]	@ (80011b0 <HAL_RCC_OscConfig+0x4cc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010e6:	f7ff fb35 	bl	8000754 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80010ec:	e008      	b.n	8001100 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80010ee:	f7ff fb31 	bl	8000754 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b02      	cmp	r3, #2
 80010fa:	d901      	bls.n	8001100 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80010fc:	2303      	movs	r3, #3
 80010fe:	e06d      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001100:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1f0      	bne.n	80010ee <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6a1b      	ldr	r3, [r3, #32]
 8001110:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001114:	d108      	bne.n	8001128 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001116:	4b24      	ldr	r3, [pc, #144]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	689b      	ldr	r3, [r3, #8]
 8001122:	4921      	ldr	r1, [pc, #132]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001124:	4313      	orrs	r3, r2
 8001126:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001128:	4b1f      	ldr	r3, [pc, #124]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6a19      	ldr	r1, [r3, #32]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001138:	430b      	orrs	r3, r1
 800113a:	491b      	ldr	r1, [pc, #108]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 800113c:	4313      	orrs	r3, r2
 800113e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001140:	4b1b      	ldr	r3, [pc, #108]	@ (80011b0 <HAL_RCC_OscConfig+0x4cc>)
 8001142:	2201      	movs	r2, #1
 8001144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fb05 	bl	8000754 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff fb01 	bl	8000754 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e03d      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001160:	4b11      	ldr	r3, [pc, #68]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d0f0      	beq.n	800114e <HAL_RCC_OscConfig+0x46a>
 800116c:	e035      	b.n	80011da <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800116e:	4b10      	ldr	r3, [pc, #64]	@ (80011b0 <HAL_RCC_OscConfig+0x4cc>)
 8001170:	2200      	movs	r2, #0
 8001172:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001174:	f7ff faee 	bl	8000754 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800117c:	f7ff faea 	bl	8000754 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e026      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800118e:	4b06      	ldr	r3, [pc, #24]	@ (80011a8 <HAL_RCC_OscConfig+0x4c4>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f0      	bne.n	800117c <HAL_RCC_OscConfig+0x498>
 800119a:	e01e      	b.n	80011da <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69db      	ldr	r3, [r3, #28]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d107      	bne.n	80011b4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80011a4:	2301      	movs	r3, #1
 80011a6:	e019      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40007000 	.word	0x40007000
 80011b0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_RCC_OscConfig+0x500>)
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	6a1b      	ldr	r3, [r3, #32]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d106      	bne.n	80011d6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d001      	beq.n	80011da <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e000      	b.n	80011dc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80011da:	2300      	movs	r3, #0
}
 80011dc:	4618      	mov	r0, r3
 80011de:	3718      	adds	r7, #24
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40021000 	.word	0x40021000

080011e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
 80011f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d101      	bne.n	80011fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e0d0      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011fc:	4b6a      	ldr	r3, [pc, #424]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0307 	and.w	r3, r3, #7
 8001204:	683a      	ldr	r2, [r7, #0]
 8001206:	429a      	cmp	r2, r3
 8001208:	d910      	bls.n	800122c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800120a:	4b67      	ldr	r3, [pc, #412]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f023 0207 	bic.w	r2, r3, #7
 8001212:	4965      	ldr	r1, [pc, #404]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800121a:	4b63      	ldr	r3, [pc, #396]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	f003 0307 	and.w	r3, r3, #7
 8001222:	683a      	ldr	r2, [r7, #0]
 8001224:	429a      	cmp	r2, r3
 8001226:	d001      	beq.n	800122c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e0b8      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d020      	beq.n	800127a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	f003 0304 	and.w	r3, r3, #4
 8001240:	2b00      	cmp	r3, #0
 8001242:	d005      	beq.n	8001250 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001244:	4b59      	ldr	r3, [pc, #356]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	4a58      	ldr	r2, [pc, #352]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800124a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800124e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0308 	and.w	r3, r3, #8
 8001258:	2b00      	cmp	r3, #0
 800125a:	d005      	beq.n	8001268 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800125c:	4b53      	ldr	r3, [pc, #332]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	4a52      	ldr	r2, [pc, #328]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001262:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001266:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001268:	4b50      	ldr	r3, [pc, #320]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	494d      	ldr	r1, [pc, #308]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001276:	4313      	orrs	r3, r2
 8001278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0301 	and.w	r3, r3, #1
 8001282:	2b00      	cmp	r3, #0
 8001284:	d040      	beq.n	8001308 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d107      	bne.n	800129e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800128e:	4b47      	ldr	r3, [pc, #284]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001296:	2b00      	cmp	r3, #0
 8001298:	d115      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e07f      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	2b02      	cmp	r3, #2
 80012a4:	d107      	bne.n	80012b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012a6:	4b41      	ldr	r3, [pc, #260]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d109      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e073      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012b6:	4b3d      	ldr	r3, [pc, #244]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f003 0302 	and.w	r3, r3, #2
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d101      	bne.n	80012c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e06b      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012c6:	4b39      	ldr	r3, [pc, #228]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f023 0203 	bic.w	r2, r3, #3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	685b      	ldr	r3, [r3, #4]
 80012d2:	4936      	ldr	r1, [pc, #216]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012d8:	f7ff fa3c 	bl	8000754 <HAL_GetTick>
 80012dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012de:	e00a      	b.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012e0:	f7ff fa38 	bl	8000754 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e053      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012f6:	4b2d      	ldr	r3, [pc, #180]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 020c 	and.w	r2, r3, #12
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	009b      	lsls	r3, r3, #2
 8001304:	429a      	cmp	r2, r3
 8001306:	d1eb      	bne.n	80012e0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001308:	4b27      	ldr	r3, [pc, #156]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 0307 	and.w	r3, r3, #7
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	429a      	cmp	r2, r3
 8001314:	d210      	bcs.n	8001338 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001316:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 0207 	bic.w	r2, r3, #7
 800131e:	4922      	ldr	r1, [pc, #136]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	4313      	orrs	r3, r2
 8001324:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_RCC_ClockConfig+0x1c0>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	683a      	ldr	r2, [r7, #0]
 8001330:	429a      	cmp	r2, r3
 8001332:	d001      	beq.n	8001338 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	e032      	b.n	800139e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 0304 	and.w	r3, r3, #4
 8001340:	2b00      	cmp	r3, #0
 8001342:	d008      	beq.n	8001356 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001344:	4b19      	ldr	r3, [pc, #100]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	4916      	ldr	r1, [pc, #88]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001352:	4313      	orrs	r3, r2
 8001354:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f003 0308 	and.w	r3, r3, #8
 800135e:	2b00      	cmp	r3, #0
 8001360:	d009      	beq.n	8001376 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001362:	4b12      	ldr	r3, [pc, #72]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	691b      	ldr	r3, [r3, #16]
 800136e:	00db      	lsls	r3, r3, #3
 8001370:	490e      	ldr	r1, [pc, #56]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 8001372:	4313      	orrs	r3, r2
 8001374:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001376:	f000 f821 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 800137a:	4602      	mov	r2, r0
 800137c:	4b0b      	ldr	r3, [pc, #44]	@ (80013ac <HAL_RCC_ClockConfig+0x1c4>)
 800137e:	685b      	ldr	r3, [r3, #4]
 8001380:	091b      	lsrs	r3, r3, #4
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	490a      	ldr	r1, [pc, #40]	@ (80013b0 <HAL_RCC_ClockConfig+0x1c8>)
 8001388:	5ccb      	ldrb	r3, [r1, r3]
 800138a:	fa22 f303 	lsr.w	r3, r2, r3
 800138e:	4a09      	ldr	r2, [pc, #36]	@ (80013b4 <HAL_RCC_ClockConfig+0x1cc>)
 8001390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001392:	4b09      	ldr	r3, [pc, #36]	@ (80013b8 <HAL_RCC_ClockConfig+0x1d0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff f99a 	bl	80006d0 <HAL_InitTick>

  return HAL_OK;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	3710      	adds	r7, #16
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	40022000 	.word	0x40022000
 80013ac:	40021000 	.word	0x40021000
 80013b0:	08004190 	.word	0x08004190
 80013b4:	20000000 	.word	0x20000000
 80013b8:	20000004 	.word	0x20000004

080013bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	b087      	sub	sp, #28
 80013c0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80013d6:	4b1e      	ldr	r3, [pc, #120]	@ (8001450 <HAL_RCC_GetSysClockFreq+0x94>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b04      	cmp	r3, #4
 80013e4:	d002      	beq.n	80013ec <HAL_RCC_GetSysClockFreq+0x30>
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d003      	beq.n	80013f2 <HAL_RCC_GetSysClockFreq+0x36>
 80013ea:	e027      	b.n	800143c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80013ec:	4b19      	ldr	r3, [pc, #100]	@ (8001454 <HAL_RCC_GetSysClockFreq+0x98>)
 80013ee:	613b      	str	r3, [r7, #16]
      break;
 80013f0:	e027      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	0c9b      	lsrs	r3, r3, #18
 80013f6:	f003 030f 	and.w	r3, r3, #15
 80013fa:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <HAL_RCC_GetSysClockFreq+0x9c>)
 80013fc:	5cd3      	ldrb	r3, [r2, r3]
 80013fe:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d010      	beq.n	800142c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800140a:	4b11      	ldr	r3, [pc, #68]	@ (8001450 <HAL_RCC_GetSysClockFreq+0x94>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	0c5b      	lsrs	r3, r3, #17
 8001410:	f003 0301 	and.w	r3, r3, #1
 8001414:	4a11      	ldr	r2, [pc, #68]	@ (800145c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001416:	5cd3      	ldrb	r3, [r2, r3]
 8001418:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a0d      	ldr	r2, [pc, #52]	@ (8001454 <HAL_RCC_GetSysClockFreq+0x98>)
 800141e:	fb03 f202 	mul.w	r2, r3, r2
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	fbb2 f3f3 	udiv	r3, r2, r3
 8001428:	617b      	str	r3, [r7, #20]
 800142a:	e004      	b.n	8001436 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a0c      	ldr	r2, [pc, #48]	@ (8001460 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001430:	fb02 f303 	mul.w	r3, r2, r3
 8001434:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	613b      	str	r3, [r7, #16]
      break;
 800143a:	e002      	b.n	8001442 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800143c:	4b05      	ldr	r3, [pc, #20]	@ (8001454 <HAL_RCC_GetSysClockFreq+0x98>)
 800143e:	613b      	str	r3, [r7, #16]
      break;
 8001440:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001442:	693b      	ldr	r3, [r7, #16]
}
 8001444:	4618      	mov	r0, r3
 8001446:	371c      	adds	r7, #28
 8001448:	46bd      	mov	sp, r7
 800144a:	bc80      	pop	{r7}
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000
 8001454:	007a1200 	.word	0x007a1200
 8001458:	080041a0 	.word	0x080041a0
 800145c:	080041b0 	.word	0x080041b0
 8001460:	003d0900 	.word	0x003d0900

08001464 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001464:	b480      	push	{r7}
 8001466:	b085      	sub	sp, #20
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800146c:	4b0a      	ldr	r3, [pc, #40]	@ (8001498 <RCC_Delay+0x34>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a0a      	ldr	r2, [pc, #40]	@ (800149c <RCC_Delay+0x38>)
 8001472:	fba2 2303 	umull	r2, r3, r2, r3
 8001476:	0a5b      	lsrs	r3, r3, #9
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	fb02 f303 	mul.w	r3, r2, r3
 800147e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001480:	bf00      	nop
  }
  while (Delay --);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	1e5a      	subs	r2, r3, #1
 8001486:	60fa      	str	r2, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f9      	bne.n	8001480 <RCC_Delay+0x1c>
}
 800148c:	bf00      	nop
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	bc80      	pop	{r7}
 8001496:	4770      	bx	lr
 8001498:	20000000 	.word	0x20000000
 800149c:	10624dd3 	.word	0x10624dd3

080014a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d101      	bne.n	80014b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e041      	b.n	8001536 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80014b8:	b2db      	uxtb	r3, r3
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d106      	bne.n	80014cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f7ff f87a 	bl	80005c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2202      	movs	r2, #2
 80014d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3304      	adds	r3, #4
 80014dc:	4619      	mov	r1, r3
 80014de:	4610      	mov	r0, r2
 80014e0:	f000 f8f4 	bl	80016cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	2201      	movs	r2, #1
 80014e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2201      	movs	r2, #1
 80014f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	2201      	movs	r2, #1
 8001500:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b084      	sub	sp, #16
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
 8001546:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001548:	2300      	movs	r3, #0
 800154a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001552:	2b01      	cmp	r3, #1
 8001554:	d101      	bne.n	800155a <HAL_TIM_ConfigClockSource+0x1c>
 8001556:	2302      	movs	r3, #2
 8001558:	e0b4      	b.n	80016c4 <HAL_TIM_ConfigClockSource+0x186>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2201      	movs	r2, #1
 800155e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2202      	movs	r2, #2
 8001566:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001578:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001580:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001592:	d03e      	beq.n	8001612 <HAL_TIM_ConfigClockSource+0xd4>
 8001594:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001598:	f200 8087 	bhi.w	80016aa <HAL_TIM_ConfigClockSource+0x16c>
 800159c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015a0:	f000 8086 	beq.w	80016b0 <HAL_TIM_ConfigClockSource+0x172>
 80015a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80015a8:	d87f      	bhi.n	80016aa <HAL_TIM_ConfigClockSource+0x16c>
 80015aa:	2b70      	cmp	r3, #112	@ 0x70
 80015ac:	d01a      	beq.n	80015e4 <HAL_TIM_ConfigClockSource+0xa6>
 80015ae:	2b70      	cmp	r3, #112	@ 0x70
 80015b0:	d87b      	bhi.n	80016aa <HAL_TIM_ConfigClockSource+0x16c>
 80015b2:	2b60      	cmp	r3, #96	@ 0x60
 80015b4:	d050      	beq.n	8001658 <HAL_TIM_ConfigClockSource+0x11a>
 80015b6:	2b60      	cmp	r3, #96	@ 0x60
 80015b8:	d877      	bhi.n	80016aa <HAL_TIM_ConfigClockSource+0x16c>
 80015ba:	2b50      	cmp	r3, #80	@ 0x50
 80015bc:	d03c      	beq.n	8001638 <HAL_TIM_ConfigClockSource+0xfa>
 80015be:	2b50      	cmp	r3, #80	@ 0x50
 80015c0:	d873      	bhi.n	80016aa <HAL_TIM_ConfigClockSource+0x16c>
 80015c2:	2b40      	cmp	r3, #64	@ 0x40
 80015c4:	d058      	beq.n	8001678 <HAL_TIM_ConfigClockSource+0x13a>
 80015c6:	2b40      	cmp	r3, #64	@ 0x40
 80015c8:	d86f      	bhi.n	80016aa <HAL_TIM_ConfigClockSource+0x16c>
 80015ca:	2b30      	cmp	r3, #48	@ 0x30
 80015cc:	d064      	beq.n	8001698 <HAL_TIM_ConfigClockSource+0x15a>
 80015ce:	2b30      	cmp	r3, #48	@ 0x30
 80015d0:	d86b      	bhi.n	80016aa <HAL_TIM_ConfigClockSource+0x16c>
 80015d2:	2b20      	cmp	r3, #32
 80015d4:	d060      	beq.n	8001698 <HAL_TIM_ConfigClockSource+0x15a>
 80015d6:	2b20      	cmp	r3, #32
 80015d8:	d867      	bhi.n	80016aa <HAL_TIM_ConfigClockSource+0x16c>
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d05c      	beq.n	8001698 <HAL_TIM_ConfigClockSource+0x15a>
 80015de:	2b10      	cmp	r3, #16
 80015e0:	d05a      	beq.n	8001698 <HAL_TIM_ConfigClockSource+0x15a>
 80015e2:	e062      	b.n	80016aa <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80015f4:	f000 f94f 	bl	8001896 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001606:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	68ba      	ldr	r2, [r7, #8]
 800160e:	609a      	str	r2, [r3, #8]
      break;
 8001610:	e04f      	b.n	80016b2 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001622:	f000 f938 	bl	8001896 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	689a      	ldr	r2, [r3, #8]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001634:	609a      	str	r2, [r3, #8]
      break;
 8001636:	e03c      	b.n	80016b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001644:	461a      	mov	r2, r3
 8001646:	f000 f8af 	bl	80017a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2150      	movs	r1, #80	@ 0x50
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f906 	bl	8001862 <TIM_ITRx_SetConfig>
      break;
 8001656:	e02c      	b.n	80016b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001664:	461a      	mov	r2, r3
 8001666:	f000 f8cd 	bl	8001804 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2160      	movs	r1, #96	@ 0x60
 8001670:	4618      	mov	r0, r3
 8001672:	f000 f8f6 	bl	8001862 <TIM_ITRx_SetConfig>
      break;
 8001676:	e01c      	b.n	80016b2 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001684:	461a      	mov	r2, r3
 8001686:	f000 f88f 	bl	80017a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2140      	movs	r1, #64	@ 0x40
 8001690:	4618      	mov	r0, r3
 8001692:	f000 f8e6 	bl	8001862 <TIM_ITRx_SetConfig>
      break;
 8001696:	e00c      	b.n	80016b2 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4619      	mov	r1, r3
 80016a2:	4610      	mov	r0, r2
 80016a4:	f000 f8dd 	bl	8001862 <TIM_ITRx_SetConfig>
      break;
 80016a8:	e003      	b.n	80016b2 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
      break;
 80016ae:	e000      	b.n	80016b2 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80016b0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	2201      	movs	r2, #1
 80016b6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	2200      	movs	r2, #0
 80016be:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80016c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}

080016cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b085      	sub	sp, #20
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
 80016d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	4a2f      	ldr	r2, [pc, #188]	@ (800179c <TIM_Base_SetConfig+0xd0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d00b      	beq.n	80016fc <TIM_Base_SetConfig+0x30>
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016ea:	d007      	beq.n	80016fc <TIM_Base_SetConfig+0x30>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	4a2c      	ldr	r2, [pc, #176]	@ (80017a0 <TIM_Base_SetConfig+0xd4>)
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d003      	beq.n	80016fc <TIM_Base_SetConfig+0x30>
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a2b      	ldr	r2, [pc, #172]	@ (80017a4 <TIM_Base_SetConfig+0xd8>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d108      	bne.n	800170e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	68fa      	ldr	r2, [r7, #12]
 800170a:	4313      	orrs	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a22      	ldr	r2, [pc, #136]	@ (800179c <TIM_Base_SetConfig+0xd0>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d00b      	beq.n	800172e <TIM_Base_SetConfig+0x62>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800171c:	d007      	beq.n	800172e <TIM_Base_SetConfig+0x62>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a1f      	ldr	r2, [pc, #124]	@ (80017a0 <TIM_Base_SetConfig+0xd4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d003      	beq.n	800172e <TIM_Base_SetConfig+0x62>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a1e      	ldr	r2, [pc, #120]	@ (80017a4 <TIM_Base_SetConfig+0xd8>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d108      	bne.n	8001740 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4313      	orrs	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	695b      	ldr	r3, [r3, #20]
 800174a:	4313      	orrs	r3, r2
 800174c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	4a0d      	ldr	r2, [pc, #52]	@ (800179c <TIM_Base_SetConfig+0xd0>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d103      	bne.n	8001774 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	691a      	ldr	r2, [r3, #16]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2201      	movs	r2, #1
 8001778:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d005      	beq.n	8001792 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	691b      	ldr	r3, [r3, #16]
 800178a:	f023 0201 	bic.w	r2, r3, #1
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	611a      	str	r2, [r3, #16]
  }
}
 8001792:	bf00      	nop
 8001794:	3714      	adds	r7, #20
 8001796:	46bd      	mov	sp, r7
 8001798:	bc80      	pop	{r7}
 800179a:	4770      	bx	lr
 800179c:	40012c00 	.word	0x40012c00
 80017a0:	40000400 	.word	0x40000400
 80017a4:	40000800 	.word	0x40000800

080017a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b087      	sub	sp, #28
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	6a1b      	ldr	r3, [r3, #32]
 80017b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	6a1b      	ldr	r3, [r3, #32]
 80017be:	f023 0201 	bic.w	r2, r3, #1
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	699b      	ldr	r3, [r3, #24]
 80017ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80017d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	011b      	lsls	r3, r3, #4
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4313      	orrs	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	f023 030a 	bic.w	r3, r3, #10
 80017e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	621a      	str	r2, [r3, #32]
}
 80017fa:	bf00      	nop
 80017fc:	371c      	adds	r7, #28
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001804:	b480      	push	{r7}
 8001806:	b087      	sub	sp, #28
 8001808:	af00      	add	r7, sp, #0
 800180a:	60f8      	str	r0, [r7, #12]
 800180c:	60b9      	str	r1, [r7, #8]
 800180e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	6a1b      	ldr	r3, [r3, #32]
 800181a:	f023 0210 	bic.w	r2, r3, #16
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	699b      	ldr	r3, [r3, #24]
 8001826:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001828:	693b      	ldr	r3, [r7, #16]
 800182a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800182e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	031b      	lsls	r3, r3, #12
 8001834:	693a      	ldr	r2, [r7, #16]
 8001836:	4313      	orrs	r3, r2
 8001838:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001840:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	011b      	lsls	r3, r3, #4
 8001846:	697a      	ldr	r2, [r7, #20]
 8001848:	4313      	orrs	r3, r2
 800184a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	693a      	ldr	r2, [r7, #16]
 8001850:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	621a      	str	r2, [r3, #32]
}
 8001858:	bf00      	nop
 800185a:	371c      	adds	r7, #28
 800185c:	46bd      	mov	sp, r7
 800185e:	bc80      	pop	{r7}
 8001860:	4770      	bx	lr

08001862 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001862:	b480      	push	{r7}
 8001864:	b085      	sub	sp, #20
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
 800186a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001878:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	4313      	orrs	r3, r2
 8001880:	f043 0307 	orr.w	r3, r3, #7
 8001884:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	68fa      	ldr	r2, [r7, #12]
 800188a:	609a      	str	r2, [r3, #8]
}
 800188c:	bf00      	nop
 800188e:	3714      	adds	r7, #20
 8001890:	46bd      	mov	sp, r7
 8001892:	bc80      	pop	{r7}
 8001894:	4770      	bx	lr

08001896 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001896:	b480      	push	{r7}
 8001898:	b087      	sub	sp, #28
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80018b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	021a      	lsls	r2, r3, #8
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	431a      	orrs	r2, r3
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	4313      	orrs	r3, r2
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	609a      	str	r2, [r3, #8]
}
 80018ca:	bf00      	nop
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bc80      	pop	{r7}
 80018d2:	4770      	bx	lr

080018d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d101      	bne.n	80018ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018e8:	2302      	movs	r3, #2
 80018ea:	e046      	b.n	800197a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2201      	movs	r2, #1
 80018f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2202      	movs	r2, #2
 80018f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	689b      	ldr	r3, [r3, #8]
 800190a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	68fa      	ldr	r2, [r7, #12]
 800191a:	4313      	orrs	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	68fa      	ldr	r2, [r7, #12]
 8001924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a16      	ldr	r2, [pc, #88]	@ (8001984 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d00e      	beq.n	800194e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001938:	d009      	beq.n	800194e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a12      	ldr	r2, [pc, #72]	@ (8001988 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001940:	4293      	cmp	r3, r2
 8001942:	d004      	beq.n	800194e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a10      	ldr	r2, [pc, #64]	@ (800198c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d10c      	bne.n	8001968 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800194e:	68bb      	ldr	r3, [r7, #8]
 8001950:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	4313      	orrs	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001978:	2300      	movs	r3, #0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3714      	adds	r7, #20
 800197e:	46bd      	mov	sp, r7
 8001980:	bc80      	pop	{r7}
 8001982:	4770      	bx	lr
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40000400 	.word	0x40000400
 800198c:	40000800 	.word	0x40000800

08001990 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800199e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80019a2:	2b84      	cmp	r3, #132	@ 0x84
 80019a4:	d005      	beq.n	80019b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80019a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	4413      	add	r3, r2
 80019ae:	3303      	adds	r3, #3
 80019b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80019b2:	68fb      	ldr	r3, [r7, #12]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3714      	adds	r7, #20
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr

080019be <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80019c4:	f3ef 8305 	mrs	r3, IPSR
 80019c8:	607b      	str	r3, [r7, #4]
  return(result);
 80019ca:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	bf14      	ite	ne
 80019d0:	2301      	movne	r3, #1
 80019d2:	2300      	moveq	r3, #0
 80019d4:	b2db      	uxtb	r3, r3
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	370c      	adds	r7, #12
 80019da:	46bd      	mov	sp, r7
 80019dc:	bc80      	pop	{r7}
 80019de:	4770      	bx	lr

080019e0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80019e4:	f001 f924 	bl	8002c30 <vTaskStartScheduler>
  
  return osOK;
 80019e8:	2300      	movs	r3, #0
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	bd80      	pop	{r7, pc}

080019ee <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80019ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019f0:	b089      	sub	sp, #36	@ 0x24
 80019f2:	af04      	add	r7, sp, #16
 80019f4:	6078      	str	r0, [r7, #4]
 80019f6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	695b      	ldr	r3, [r3, #20]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d020      	beq.n	8001a42 <osThreadCreate+0x54>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d01c      	beq.n	8001a42 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	685c      	ldr	r4, [r3, #4]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	691e      	ldr	r6, [r3, #16]
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	f7ff ffb8 	bl	8001990 <makeFreeRtosPriority>
 8001a20:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	695b      	ldr	r3, [r3, #20]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a2a:	9202      	str	r2, [sp, #8]
 8001a2c:	9301      	str	r3, [sp, #4]
 8001a2e:	9100      	str	r1, [sp, #0]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	4632      	mov	r2, r6
 8001a34:	4629      	mov	r1, r5
 8001a36:	4620      	mov	r0, r4
 8001a38:	f000 ff2d 	bl	8002896 <xTaskCreateStatic>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60fb      	str	r3, [r7, #12]
 8001a40:	e01c      	b.n	8001a7c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685c      	ldr	r4, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a4e:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff ff9a 	bl	8001990 <makeFreeRtosPriority>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	f107 030c 	add.w	r3, r7, #12
 8001a62:	9301      	str	r3, [sp, #4]
 8001a64:	9200      	str	r2, [sp, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	4632      	mov	r2, r6
 8001a6a:	4629      	mov	r1, r5
 8001a6c:	4620      	mov	r0, r4
 8001a6e:	f000 ff72 	bl	8002956 <xTaskCreate>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d001      	beq.n	8001a7c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	e000      	b.n	8001a7e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001a86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d001      	beq.n	8001a9c <osDelay+0x16>
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	e000      	b.n	8001a9e <osDelay+0x18>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f001 f890 	bl	8002bc4 <vTaskDelay>
  
  return osOK;
 8001aa4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af02      	add	r7, sp, #8
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d00f      	beq.n	8001ae0 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d10a      	bne.n	8001adc <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	2203      	movs	r2, #3
 8001acc:	9200      	str	r2, [sp, #0]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2100      	movs	r1, #0
 8001ad2:	2001      	movs	r0, #1
 8001ad4:	f000 f9bc 	bl	8001e50 <xQueueGenericCreateStatic>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	e016      	b.n	8001b0a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8001adc:	2300      	movs	r3, #0
 8001ade:	e014      	b.n	8001b0a <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d110      	bne.n	8001b08 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8001ae6:	2203      	movs	r2, #3
 8001ae8:	2100      	movs	r1, #0
 8001aea:	2001      	movs	r0, #1
 8001aec:	f000 fa2d 	bl	8001f4a <xQueueGenericCreate>
 8001af0:	60f8      	str	r0, [r7, #12]
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d005      	beq.n	8001b04 <osSemaphoreCreate+0x56>
 8001af8:	2300      	movs	r3, #0
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f000 fa7e 	bl	8002000 <xQueueGenericSend>
      return sema;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	e000      	b.n	8001b0a <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8001b08:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3710      	adds	r7, #16
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
	...

08001b14 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8001b1e:	2300      	movs	r3, #0
 8001b20:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <osSemaphoreWait+0x18>
    return osErrorParameter;
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	e03a      	b.n	8001ba2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b36:	d103      	bne.n	8001b40 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8001b38:	f04f 33ff 	mov.w	r3, #4294967295
 8001b3c:	60fb      	str	r3, [r7, #12]
 8001b3e:	e009      	b.n	8001b54 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d101      	bne.n	8001b54 <osSemaphoreWait+0x40>
      ticks = 1;
 8001b50:	2301      	movs	r3, #1
 8001b52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8001b54:	f7ff ff33 	bl	80019be <inHandlerMode>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d017      	beq.n	8001b8e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001b5e:	f107 0308 	add.w	r3, r7, #8
 8001b62:	461a      	mov	r2, r3
 8001b64:	2100      	movs	r1, #0
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fcec 	bl	8002544 <xQueueReceiveFromISR>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d001      	beq.n	8001b76 <osSemaphoreWait+0x62>
      return osErrorOS;
 8001b72:	23ff      	movs	r3, #255	@ 0xff
 8001b74:	e015      	b.n	8001ba2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d011      	beq.n	8001ba0 <osSemaphoreWait+0x8c>
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <osSemaphoreWait+0x98>)
 8001b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	f3bf 8f4f 	dsb	sy
 8001b88:	f3bf 8f6f 	isb	sy
 8001b8c:	e008      	b.n	8001ba0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8001b8e:	68f9      	ldr	r1, [r7, #12]
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f000 fbc7 	bl	8002324 <xQueueSemaphoreTake>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d001      	beq.n	8001ba0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8001b9c:	23ff      	movs	r3, #255	@ 0xff
 8001b9e:	e000      	b.n	8001ba2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8001ba0:	2300      	movs	r3, #0
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3710      	adds	r7, #16
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	e000ed04 	.word	0xe000ed04

08001bb0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8001bc0:	f7ff fefd 	bl	80019be <inHandlerMode>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d016      	beq.n	8001bf8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8001bca:	f107 0308 	add.w	r3, r7, #8
 8001bce:	4619      	mov	r1, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f000 fb17 	bl	8002204 <xQueueGiveFromISR>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d001      	beq.n	8001be0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8001bdc:	23ff      	movs	r3, #255	@ 0xff
 8001bde:	e017      	b.n	8001c10 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d013      	beq.n	8001c0e <osSemaphoreRelease+0x5e>
 8001be6:	4b0c      	ldr	r3, [pc, #48]	@ (8001c18 <osSemaphoreRelease+0x68>)
 8001be8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001bec:	601a      	str	r2, [r3, #0]
 8001bee:	f3bf 8f4f 	dsb	sy
 8001bf2:	f3bf 8f6f 	isb	sy
 8001bf6:	e00a      	b.n	8001c0e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	2100      	movs	r1, #0
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f000 f9fe 	bl	8002000 <xQueueGenericSend>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d001      	beq.n	8001c0e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8001c0a:	23ff      	movs	r3, #255	@ 0xff
 8001c0c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3710      	adds	r7, #16
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	e000ed04 	.word	0xe000ed04

08001c1c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f103 0208 	add.w	r2, r3, #8
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f04f 32ff 	mov.w	r2, #4294967295
 8001c34:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f103 0208 	add.w	r2, r3, #8
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	f103 0208 	add.w	r2, r3, #8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr

08001c5a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr

08001c72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001c72:	b480      	push	{r7}
 8001c74:	b085      	sub	sp, #20
 8001c76:	af00      	add	r7, sp, #0
 8001c78:	6078      	str	r0, [r7, #4]
 8001c7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	689a      	ldr	r2, [r3, #8]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	683a      	ldr	r2, [r7, #0]
 8001c96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	683a      	ldr	r2, [r7, #0]
 8001c9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	1c5a      	adds	r2, r3, #1
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	3714      	adds	r7, #20
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b085      	sub	sp, #20
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cce:	d103      	bne.n	8001cd8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691b      	ldr	r3, [r3, #16]
 8001cd4:	60fb      	str	r3, [r7, #12]
 8001cd6:	e00c      	b.n	8001cf2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3308      	adds	r3, #8
 8001cdc:	60fb      	str	r3, [r7, #12]
 8001cde:	e002      	b.n	8001ce6 <vListInsert+0x2e>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	68ba      	ldr	r2, [r7, #8]
 8001cee:	429a      	cmp	r2, r3
 8001cf0:	d2f6      	bcs.n	8001ce0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	685a      	ldr	r2, [r3, #4]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	687a      	ldr	r2, [r7, #4]
 8001d12:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	1c5a      	adds	r2, r3, #1
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	601a      	str	r2, [r3, #0]
}
 8001d1e:	bf00      	nop
 8001d20:	3714      	adds	r7, #20
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bc80      	pop	{r7}
 8001d26:	4770      	bx	lr

08001d28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6892      	ldr	r2, [r2, #8]
 8001d3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	687a      	ldr	r2, [r7, #4]
 8001d46:	6852      	ldr	r2, [r2, #4]
 8001d48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d103      	bne.n	8001d5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	1e5a      	subs	r2, r3, #1
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	3714      	adds	r7, #20
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr
	...

08001d7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10b      	bne.n	8001da8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001d94:	f383 8811 	msr	BASEPRI, r3
 8001d98:	f3bf 8f6f 	isb	sy
 8001d9c:	f3bf 8f4f 	dsb	sy
 8001da0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001da2:	bf00      	nop
 8001da4:	bf00      	nop
 8001da6:	e7fd      	b.n	8001da4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001da8:	f001 fe60 	bl	8003a6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001db8:	fb01 f303 	mul.w	r3, r1, r3
 8001dbc:	441a      	add	r2, r3
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	68f9      	ldr	r1, [r7, #12]
 8001ddc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	441a      	add	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	22ff      	movs	r2, #255	@ 0xff
 8001dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	22ff      	movs	r2, #255	@ 0xff
 8001df4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d114      	bne.n	8001e28 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d01a      	beq.n	8001e3c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	3310      	adds	r3, #16
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f001 f95a 	bl	80030c4 <xTaskRemoveFromEventList>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d012      	beq.n	8001e3c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001e16:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <xQueueGenericReset+0xd0>)
 8001e18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	f3bf 8f4f 	dsb	sy
 8001e22:	f3bf 8f6f 	isb	sy
 8001e26:	e009      	b.n	8001e3c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	3310      	adds	r3, #16
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fef5 	bl	8001c1c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	3324      	adds	r3, #36	@ 0x24
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fef0 	bl	8001c1c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001e3c:	f001 fe46 	bl	8003acc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	e000ed04 	.word	0xe000ed04

08001e50 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08e      	sub	sp, #56	@ 0x38
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	607a      	str	r2, [r7, #4]
 8001e5c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d10b      	bne.n	8001e7c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8001e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e68:	f383 8811 	msr	BASEPRI, r3
 8001e6c:	f3bf 8f6f 	isb	sy
 8001e70:	f3bf 8f4f 	dsb	sy
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8001e76:	bf00      	nop
 8001e78:	bf00      	nop
 8001e7a:	e7fd      	b.n	8001e78 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d10b      	bne.n	8001e9a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8001e82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001e86:	f383 8811 	msr	BASEPRI, r3
 8001e8a:	f3bf 8f6f 	isb	sy
 8001e8e:	f3bf 8f4f 	dsb	sy
 8001e92:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	e7fd      	b.n	8001e96 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <xQueueGenericCreateStatic+0x56>
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <xQueueGenericCreateStatic+0x5a>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e000      	b.n	8001eac <xQueueGenericCreateStatic+0x5c>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d10b      	bne.n	8001ec8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8001eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001eb4:	f383 8811 	msr	BASEPRI, r3
 8001eb8:	f3bf 8f6f 	isb	sy
 8001ebc:	f3bf 8f4f 	dsb	sy
 8001ec0:	623b      	str	r3, [r7, #32]
}
 8001ec2:	bf00      	nop
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d102      	bne.n	8001ed4 <xQueueGenericCreateStatic+0x84>
 8001ece:	68bb      	ldr	r3, [r7, #8]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d101      	bne.n	8001ed8 <xQueueGenericCreateStatic+0x88>
 8001ed4:	2301      	movs	r3, #1
 8001ed6:	e000      	b.n	8001eda <xQueueGenericCreateStatic+0x8a>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d10b      	bne.n	8001ef6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8001ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001ee2:	f383 8811 	msr	BASEPRI, r3
 8001ee6:	f3bf 8f6f 	isb	sy
 8001eea:	f3bf 8f4f 	dsb	sy
 8001eee:	61fb      	str	r3, [r7, #28]
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	e7fd      	b.n	8001ef2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8001ef6:	2348      	movs	r3, #72	@ 0x48
 8001ef8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	2b48      	cmp	r3, #72	@ 0x48
 8001efe:	d00b      	beq.n	8001f18 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8001f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f04:	f383 8811 	msr	BASEPRI, r3
 8001f08:	f3bf 8f6f 	isb	sy
 8001f0c:	f3bf 8f4f 	dsb	sy
 8001f10:	61bb      	str	r3, [r7, #24]
}
 8001f12:	bf00      	nop
 8001f14:	bf00      	nop
 8001f16:	e7fd      	b.n	8001f14 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8001f18:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8001f1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d00d      	beq.n	8001f40 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8001f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001f2c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8001f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	4613      	mov	r3, r2
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f000 f840 	bl	8001fc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001f40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3730      	adds	r7, #48	@ 0x30
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}

08001f4a <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8001f4a:	b580      	push	{r7, lr}
 8001f4c:	b08a      	sub	sp, #40	@ 0x28
 8001f4e:	af02      	add	r7, sp, #8
 8001f50:	60f8      	str	r0, [r7, #12]
 8001f52:	60b9      	str	r1, [r7, #8]
 8001f54:	4613      	mov	r3, r2
 8001f56:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10b      	bne.n	8001f76 <xQueueGenericCreate+0x2c>
	__asm volatile
 8001f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001f62:	f383 8811 	msr	BASEPRI, r3
 8001f66:	f3bf 8f6f 	isb	sy
 8001f6a:	f3bf 8f4f 	dsb	sy
 8001f6e:	613b      	str	r3, [r7, #16]
}
 8001f70:	bf00      	nop
 8001f72:	bf00      	nop
 8001f74:	e7fd      	b.n	8001f72 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	fb02 f303 	mul.w	r3, r2, r3
 8001f7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	3348      	adds	r3, #72	@ 0x48
 8001f84:	4618      	mov	r0, r3
 8001f86:	f001 fe73 	bl	8003c70 <pvPortMalloc>
 8001f8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d011      	beq.n	8001fb6 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8001f92:	69bb      	ldr	r3, [r7, #24]
 8001f94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	3348      	adds	r3, #72	@ 0x48
 8001f9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8001f9c:	69bb      	ldr	r3, [r7, #24]
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8001fa4:	79fa      	ldrb	r2, [r7, #7]
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	4613      	mov	r3, r2
 8001fac:	697a      	ldr	r2, [r7, #20]
 8001fae:	68b9      	ldr	r1, [r7, #8]
 8001fb0:	68f8      	ldr	r0, [r7, #12]
 8001fb2:	f000 f805 	bl	8001fc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8001fb6:	69bb      	ldr	r3, [r7, #24]
	}
 8001fb8:	4618      	mov	r0, r3
 8001fba:	3720      	adds	r7, #32
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd80      	pop	{r7, pc}

08001fc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	60f8      	str	r0, [r7, #12]
 8001fc8:	60b9      	str	r1, [r7, #8]
 8001fca:	607a      	str	r2, [r7, #4]
 8001fcc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d103      	bne.n	8001fdc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8001fd4:	69bb      	ldr	r3, [r7, #24]
 8001fd6:	69ba      	ldr	r2, [r7, #24]
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	e002      	b.n	8001fe2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001fe2:	69bb      	ldr	r3, [r7, #24]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8001fee:	2101      	movs	r1, #1
 8001ff0:	69b8      	ldr	r0, [r7, #24]
 8001ff2:	f7ff fec3 	bl	8001d7c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8001ff6:	bf00      	nop
 8001ff8:	3710      	adds	r7, #16
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	bd80      	pop	{r7, pc}
	...

08002000 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08e      	sub	sp, #56	@ 0x38
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800200e:	2300      	movs	r3, #0
 8002010:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10b      	bne.n	8002034 <xQueueGenericSend+0x34>
	__asm volatile
 800201c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002020:	f383 8811 	msr	BASEPRI, r3
 8002024:	f3bf 8f6f 	isb	sy
 8002028:	f3bf 8f4f 	dsb	sy
 800202c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800202e:	bf00      	nop
 8002030:	bf00      	nop
 8002032:	e7fd      	b.n	8002030 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d103      	bne.n	8002042 <xQueueGenericSend+0x42>
 800203a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800203c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800203e:	2b00      	cmp	r3, #0
 8002040:	d101      	bne.n	8002046 <xQueueGenericSend+0x46>
 8002042:	2301      	movs	r3, #1
 8002044:	e000      	b.n	8002048 <xQueueGenericSend+0x48>
 8002046:	2300      	movs	r3, #0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10b      	bne.n	8002064 <xQueueGenericSend+0x64>
	__asm volatile
 800204c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002050:	f383 8811 	msr	BASEPRI, r3
 8002054:	f3bf 8f6f 	isb	sy
 8002058:	f3bf 8f4f 	dsb	sy
 800205c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800205e:	bf00      	nop
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d103      	bne.n	8002072 <xQueueGenericSend+0x72>
 800206a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800206c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <xQueueGenericSend+0x76>
 8002072:	2301      	movs	r3, #1
 8002074:	e000      	b.n	8002078 <xQueueGenericSend+0x78>
 8002076:	2300      	movs	r3, #0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d10b      	bne.n	8002094 <xQueueGenericSend+0x94>
	__asm volatile
 800207c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002080:	f383 8811 	msr	BASEPRI, r3
 8002084:	f3bf 8f6f 	isb	sy
 8002088:	f3bf 8f4f 	dsb	sy
 800208c:	623b      	str	r3, [r7, #32]
}
 800208e:	bf00      	nop
 8002090:	bf00      	nop
 8002092:	e7fd      	b.n	8002090 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002094:	f001 f9d6 	bl	8003444 <xTaskGetSchedulerState>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d102      	bne.n	80020a4 <xQueueGenericSend+0xa4>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d101      	bne.n	80020a8 <xQueueGenericSend+0xa8>
 80020a4:	2301      	movs	r3, #1
 80020a6:	e000      	b.n	80020aa <xQueueGenericSend+0xaa>
 80020a8:	2300      	movs	r3, #0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d10b      	bne.n	80020c6 <xQueueGenericSend+0xc6>
	__asm volatile
 80020ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80020b2:	f383 8811 	msr	BASEPRI, r3
 80020b6:	f3bf 8f6f 	isb	sy
 80020ba:	f3bf 8f4f 	dsb	sy
 80020be:	61fb      	str	r3, [r7, #28]
}
 80020c0:	bf00      	nop
 80020c2:	bf00      	nop
 80020c4:	e7fd      	b.n	80020c2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80020c6:	f001 fcd1 	bl	8003a6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80020ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80020ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020d2:	429a      	cmp	r2, r3
 80020d4:	d302      	bcc.n	80020dc <xQueueGenericSend+0xdc>
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d129      	bne.n	8002130 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80020dc:	683a      	ldr	r2, [r7, #0]
 80020de:	68b9      	ldr	r1, [r7, #8]
 80020e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80020e2:	f000 fac8 	bl	8002676 <prvCopyDataToQueue>
 80020e6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80020e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d010      	beq.n	8002112 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80020f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80020f2:	3324      	adds	r3, #36	@ 0x24
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 ffe5 	bl	80030c4 <xTaskRemoveFromEventList>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d013      	beq.n	8002128 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002100:	4b3f      	ldr	r3, [pc, #252]	@ (8002200 <xQueueGenericSend+0x200>)
 8002102:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	f3bf 8f4f 	dsb	sy
 800210c:	f3bf 8f6f 	isb	sy
 8002110:	e00a      	b.n	8002128 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d007      	beq.n	8002128 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002118:	4b39      	ldr	r3, [pc, #228]	@ (8002200 <xQueueGenericSend+0x200>)
 800211a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	f3bf 8f4f 	dsb	sy
 8002124:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002128:	f001 fcd0 	bl	8003acc <vPortExitCritical>
				return pdPASS;
 800212c:	2301      	movs	r3, #1
 800212e:	e063      	b.n	80021f8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d103      	bne.n	800213e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002136:	f001 fcc9 	bl	8003acc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800213a:	2300      	movs	r3, #0
 800213c:	e05c      	b.n	80021f8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800213e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002140:	2b00      	cmp	r3, #0
 8002142:	d106      	bne.n	8002152 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002144:	f107 0314 	add.w	r3, r7, #20
 8002148:	4618      	mov	r0, r3
 800214a:	f001 f81f 	bl	800318c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800214e:	2301      	movs	r3, #1
 8002150:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002152:	f001 fcbb 	bl	8003acc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002156:	f000 fdcd 	bl	8002cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800215a:	f001 fc87 	bl	8003a6c <vPortEnterCritical>
 800215e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002160:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002164:	b25b      	sxtb	r3, r3
 8002166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800216a:	d103      	bne.n	8002174 <xQueueGenericSend+0x174>
 800216c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800216e:	2200      	movs	r2, #0
 8002170:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002176:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800217a:	b25b      	sxtb	r3, r3
 800217c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002180:	d103      	bne.n	800218a <xQueueGenericSend+0x18a>
 8002182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002184:	2200      	movs	r2, #0
 8002186:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800218a:	f001 fc9f 	bl	8003acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800218e:	1d3a      	adds	r2, r7, #4
 8002190:	f107 0314 	add.w	r3, r7, #20
 8002194:	4611      	mov	r1, r2
 8002196:	4618      	mov	r0, r3
 8002198:	f001 f80e 	bl	80031b8 <xTaskCheckForTimeOut>
 800219c:	4603      	mov	r3, r0
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d124      	bne.n	80021ec <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80021a2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021a4:	f000 fb5f 	bl	8002866 <prvIsQueueFull>
 80021a8:	4603      	mov	r3, r0
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d018      	beq.n	80021e0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80021ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80021b0:	3310      	adds	r3, #16
 80021b2:	687a      	ldr	r2, [r7, #4]
 80021b4:	4611      	mov	r1, r2
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 ff5e 	bl	8003078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80021bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021be:	f000 faea 	bl	8002796 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80021c2:	f000 fda5 	bl	8002d10 <xTaskResumeAll>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	f47f af7c 	bne.w	80020c6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80021ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002200 <xQueueGenericSend+0x200>)
 80021d0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80021d4:	601a      	str	r2, [r3, #0]
 80021d6:	f3bf 8f4f 	dsb	sy
 80021da:	f3bf 8f6f 	isb	sy
 80021de:	e772      	b.n	80020c6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80021e0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021e2:	f000 fad8 	bl	8002796 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80021e6:	f000 fd93 	bl	8002d10 <xTaskResumeAll>
 80021ea:	e76c      	b.n	80020c6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80021ec:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80021ee:	f000 fad2 	bl	8002796 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80021f2:	f000 fd8d 	bl	8002d10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80021f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3738      	adds	r7, #56	@ 0x38
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	e000ed04 	.word	0xe000ed04

08002204 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08e      	sub	sp, #56	@ 0x38
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002214:	2b00      	cmp	r3, #0
 8002216:	d10b      	bne.n	8002230 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	623b      	str	r3, [r7, #32]
}
 800222a:	bf00      	nop
 800222c:	bf00      	nop
 800222e:	e7fd      	b.n	800222c <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002234:	2b00      	cmp	r3, #0
 8002236:	d00b      	beq.n	8002250 <xQueueGiveFromISR+0x4c>
	__asm volatile
 8002238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800223c:	f383 8811 	msr	BASEPRI, r3
 8002240:	f3bf 8f6f 	isb	sy
 8002244:	f3bf 8f4f 	dsb	sy
 8002248:	61fb      	str	r3, [r7, #28]
}
 800224a:	bf00      	nop
 800224c:	bf00      	nop
 800224e:	e7fd      	b.n	800224c <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d103      	bne.n	8002260 <xQueueGiveFromISR+0x5c>
 8002258:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d101      	bne.n	8002264 <xQueueGiveFromISR+0x60>
 8002260:	2301      	movs	r3, #1
 8002262:	e000      	b.n	8002266 <xQueueGiveFromISR+0x62>
 8002264:	2300      	movs	r3, #0
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10b      	bne.n	8002282 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800226a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800226e:	f383 8811 	msr	BASEPRI, r3
 8002272:	f3bf 8f6f 	isb	sy
 8002276:	f3bf 8f4f 	dsb	sy
 800227a:	61bb      	str	r3, [r7, #24]
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	e7fd      	b.n	800227e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002282:	f001 fcb5 	bl	8003bf0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002286:	f3ef 8211 	mrs	r2, BASEPRI
 800228a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800228e:	f383 8811 	msr	BASEPRI, r3
 8002292:	f3bf 8f6f 	isb	sy
 8002296:	f3bf 8f4f 	dsb	sy
 800229a:	617a      	str	r2, [r7, #20]
 800229c:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800229e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80022a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80022a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80022a6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80022a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022ac:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d22b      	bcs.n	800230a <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80022b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022b4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80022b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80022bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022be:	1c5a      	adds	r2, r3, #1
 80022c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022c2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80022c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022cc:	d112      	bne.n	80022f4 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80022ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d016      	beq.n	8002304 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80022d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80022d8:	3324      	adds	r3, #36	@ 0x24
 80022da:	4618      	mov	r0, r3
 80022dc:	f000 fef2 	bl	80030c4 <xTaskRemoveFromEventList>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d00e      	beq.n	8002304 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d00b      	beq.n	8002304 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	e007      	b.n	8002304 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80022f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022f8:	3301      	adds	r3, #1
 80022fa:	b2db      	uxtb	r3, r3
 80022fc:	b25a      	sxtb	r2, r3
 80022fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002300:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8002304:	2301      	movs	r3, #1
 8002306:	637b      	str	r3, [r7, #52]	@ 0x34
 8002308:	e001      	b.n	800230e <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800230a:	2300      	movs	r3, #0
 800230c:	637b      	str	r3, [r7, #52]	@ 0x34
 800230e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002310:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002318:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800231a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800231c:	4618      	mov	r0, r3
 800231e:	3738      	adds	r7, #56	@ 0x38
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}

08002324 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	@ 0x38
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800232e:	2300      	movs	r3, #0
 8002330:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002336:	2300      	movs	r3, #0
 8002338:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800233a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233c:	2b00      	cmp	r3, #0
 800233e:	d10b      	bne.n	8002358 <xQueueSemaphoreTake+0x34>
	__asm volatile
 8002340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002344:	f383 8811 	msr	BASEPRI, r3
 8002348:	f3bf 8f6f 	isb	sy
 800234c:	f3bf 8f4f 	dsb	sy
 8002350:	623b      	str	r3, [r7, #32]
}
 8002352:	bf00      	nop
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002358:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800235a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00b      	beq.n	8002378 <xQueueSemaphoreTake+0x54>
	__asm volatile
 8002360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002364:	f383 8811 	msr	BASEPRI, r3
 8002368:	f3bf 8f6f 	isb	sy
 800236c:	f3bf 8f4f 	dsb	sy
 8002370:	61fb      	str	r3, [r7, #28]
}
 8002372:	bf00      	nop
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002378:	f001 f864 	bl	8003444 <xTaskGetSchedulerState>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d102      	bne.n	8002388 <xQueueSemaphoreTake+0x64>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d101      	bne.n	800238c <xQueueSemaphoreTake+0x68>
 8002388:	2301      	movs	r3, #1
 800238a:	e000      	b.n	800238e <xQueueSemaphoreTake+0x6a>
 800238c:	2300      	movs	r3, #0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10b      	bne.n	80023aa <xQueueSemaphoreTake+0x86>
	__asm volatile
 8002392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002396:	f383 8811 	msr	BASEPRI, r3
 800239a:	f3bf 8f6f 	isb	sy
 800239e:	f3bf 8f4f 	dsb	sy
 80023a2:	61bb      	str	r3, [r7, #24]
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	e7fd      	b.n	80023a6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80023aa:	f001 fb5f 	bl	8003a6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80023ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023b2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80023b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d024      	beq.n	8002404 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80023ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023bc:	1e5a      	subs	r2, r3, #1
 80023be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80023c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d104      	bne.n	80023d4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80023ca:	f001 f9e7 	bl	800379c <pvTaskIncrementMutexHeldCount>
 80023ce:	4602      	mov	r2, r0
 80023d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d00f      	beq.n	80023fc <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80023dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023de:	3310      	adds	r3, #16
 80023e0:	4618      	mov	r0, r3
 80023e2:	f000 fe6f 	bl	80030c4 <xTaskRemoveFromEventList>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d007      	beq.n	80023fc <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80023ec:	4b54      	ldr	r3, [pc, #336]	@ (8002540 <xQueueSemaphoreTake+0x21c>)
 80023ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	f3bf 8f4f 	dsb	sy
 80023f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80023fc:	f001 fb66 	bl	8003acc <vPortExitCritical>
				return pdPASS;
 8002400:	2301      	movs	r3, #1
 8002402:	e098      	b.n	8002536 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d112      	bne.n	8002430 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800240a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800240c:	2b00      	cmp	r3, #0
 800240e:	d00b      	beq.n	8002428 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	617b      	str	r3, [r7, #20]
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	e7fd      	b.n	8002424 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002428:	f001 fb50 	bl	8003acc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800242c:	2300      	movs	r3, #0
 800242e:	e082      	b.n	8002536 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002432:	2b00      	cmp	r3, #0
 8002434:	d106      	bne.n	8002444 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002436:	f107 030c 	add.w	r3, r7, #12
 800243a:	4618      	mov	r0, r3
 800243c:	f000 fea6 	bl	800318c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002440:	2301      	movs	r3, #1
 8002442:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002444:	f001 fb42 	bl	8003acc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002448:	f000 fc54 	bl	8002cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800244c:	f001 fb0e 	bl	8003a6c <vPortEnterCritical>
 8002450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002452:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002456:	b25b      	sxtb	r3, r3
 8002458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800245c:	d103      	bne.n	8002466 <xQueueSemaphoreTake+0x142>
 800245e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002460:	2200      	movs	r2, #0
 8002462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002468:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800246c:	b25b      	sxtb	r3, r3
 800246e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002472:	d103      	bne.n	800247c <xQueueSemaphoreTake+0x158>
 8002474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800247c:	f001 fb26 	bl	8003acc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002480:	463a      	mov	r2, r7
 8002482:	f107 030c 	add.w	r3, r7, #12
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f000 fe95 	bl	80031b8 <xTaskCheckForTimeOut>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d132      	bne.n	80024fa <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002494:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002496:	f000 f9d0 	bl	800283a <prvIsQueueEmpty>
 800249a:	4603      	mov	r3, r0
 800249c:	2b00      	cmp	r3, #0
 800249e:	d026      	beq.n	80024ee <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80024a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d109      	bne.n	80024bc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 80024a8:	f001 fae0 	bl	8003a6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80024ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 ffe5 	bl	8003480 <xTaskPriorityInherit>
 80024b6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 80024b8:	f001 fb08 	bl	8003acc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80024bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024be:	3324      	adds	r3, #36	@ 0x24
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	4611      	mov	r1, r2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f000 fdd7 	bl	8003078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80024ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024cc:	f000 f963 	bl	8002796 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80024d0:	f000 fc1e 	bl	8002d10 <xTaskResumeAll>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f47f af67 	bne.w	80023aa <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 80024dc:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <xQueueSemaphoreTake+0x21c>)
 80024de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f3bf 8f4f 	dsb	sy
 80024e8:	f3bf 8f6f 	isb	sy
 80024ec:	e75d      	b.n	80023aa <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80024ee:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024f0:	f000 f951 	bl	8002796 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80024f4:	f000 fc0c 	bl	8002d10 <xTaskResumeAll>
 80024f8:	e757      	b.n	80023aa <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80024fa:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80024fc:	f000 f94b 	bl	8002796 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002500:	f000 fc06 	bl	8002d10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002504:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002506:	f000 f998 	bl	800283a <prvIsQueueEmpty>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	f43f af4c 	beq.w	80023aa <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00d      	beq.n	8002534 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8002518:	f001 faa8 	bl	8003a6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800251c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800251e:	f000 f893 	bl	8002648 <prvGetDisinheritPriorityAfterTimeout>
 8002522:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002524:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800252a:	4618      	mov	r0, r3
 800252c:	f001 f8a6 	bl	800367c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002530:	f001 facc 	bl	8003acc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002534:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002536:	4618      	mov	r0, r3
 8002538:	3738      	adds	r7, #56	@ 0x38
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	e000ed04 	.word	0xe000ed04

08002544 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08e      	sub	sp, #56	@ 0x38
 8002548:	af00      	add	r7, sp, #0
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800255a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800255e:	f383 8811 	msr	BASEPRI, r3
 8002562:	f3bf 8f6f 	isb	sy
 8002566:	f3bf 8f4f 	dsb	sy
 800256a:	623b      	str	r3, [r7, #32]
}
 800256c:	bf00      	nop
 800256e:	bf00      	nop
 8002570:	e7fd      	b.n	800256e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d103      	bne.n	8002580 <xQueueReceiveFromISR+0x3c>
 8002578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800257a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800257c:	2b00      	cmp	r3, #0
 800257e:	d101      	bne.n	8002584 <xQueueReceiveFromISR+0x40>
 8002580:	2301      	movs	r3, #1
 8002582:	e000      	b.n	8002586 <xQueueReceiveFromISR+0x42>
 8002584:	2300      	movs	r3, #0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d10b      	bne.n	80025a2 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 800258a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800258e:	f383 8811 	msr	BASEPRI, r3
 8002592:	f3bf 8f6f 	isb	sy
 8002596:	f3bf 8f4f 	dsb	sy
 800259a:	61fb      	str	r3, [r7, #28]
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	e7fd      	b.n	800259e <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80025a2:	f001 fb25 	bl	8003bf0 <vPortValidateInterruptPriority>
	__asm volatile
 80025a6:	f3ef 8211 	mrs	r2, BASEPRI
 80025aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025ae:	f383 8811 	msr	BASEPRI, r3
 80025b2:	f3bf 8f6f 	isb	sy
 80025b6:	f3bf 8f4f 	dsb	sy
 80025ba:	61ba      	str	r2, [r7, #24]
 80025bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80025be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80025c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025c6:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d02f      	beq.n	800262e <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80025ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80025d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025d8:	68b9      	ldr	r1, [r7, #8]
 80025da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80025dc:	f000 f8b5 	bl	800274a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80025e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025e2:	1e5a      	subs	r2, r3, #1
 80025e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025e6:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80025e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80025ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025f0:	d112      	bne.n	8002618 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80025f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025f4:	691b      	ldr	r3, [r3, #16]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d016      	beq.n	8002628 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80025fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025fc:	3310      	adds	r3, #16
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 fd60 	bl	80030c4 <xTaskRemoveFromEventList>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d00e      	beq.n	8002628 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e007      	b.n	8002628 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800261c:	3301      	adds	r3, #1
 800261e:	b2db      	uxtb	r3, r3
 8002620:	b25a      	sxtb	r2, r3
 8002622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8002628:	2301      	movs	r3, #1
 800262a:	637b      	str	r3, [r7, #52]	@ 0x34
 800262c:	e001      	b.n	8002632 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800262e:	2300      	movs	r3, #0
 8002630:	637b      	str	r3, [r7, #52]	@ 0x34
 8002632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002634:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	f383 8811 	msr	BASEPRI, r3
}
 800263c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800263e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8002640:	4618      	mov	r0, r3
 8002642:	3738      	adds	r7, #56	@ 0x38
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002654:	2b00      	cmp	r3, #0
 8002656:	d006      	beq.n	8002666 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1c3 0307 	rsb	r3, r3, #7
 8002662:	60fb      	str	r3, [r7, #12]
 8002664:	e001      	b.n	800266a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002666:	2300      	movs	r3, #0
 8002668:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800266a:	68fb      	ldr	r3, [r7, #12]
	}
 800266c:	4618      	mov	r0, r3
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	bc80      	pop	{r7}
 8002674:	4770      	bx	lr

08002676 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b086      	sub	sp, #24
 800267a:	af00      	add	r7, sp, #0
 800267c:	60f8      	str	r0, [r7, #12]
 800267e:	60b9      	str	r1, [r7, #8]
 8002680:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800268a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002690:	2b00      	cmp	r3, #0
 8002692:	d10d      	bne.n	80026b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d14d      	bne.n	8002738 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f000 ff63 	bl	800356c <xTaskPriorityDisinherit>
 80026a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2200      	movs	r2, #0
 80026ac:	609a      	str	r2, [r3, #8]
 80026ae:	e043      	b.n	8002738 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d119      	bne.n	80026ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	6858      	ldr	r0, [r3, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026be:	461a      	mov	r2, r3
 80026c0:	68b9      	ldr	r1, [r7, #8]
 80026c2:	f001 fced 	bl	80040a0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	685a      	ldr	r2, [r3, #4]
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ce:	441a      	add	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	685a      	ldr	r2, [r3, #4]
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	689b      	ldr	r3, [r3, #8]
 80026dc:	429a      	cmp	r2, r3
 80026de:	d32b      	bcc.n	8002738 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681a      	ldr	r2, [r3, #0]
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	605a      	str	r2, [r3, #4]
 80026e8:	e026      	b.n	8002738 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	68d8      	ldr	r0, [r3, #12]
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026f2:	461a      	mov	r2, r3
 80026f4:	68b9      	ldr	r1, [r7, #8]
 80026f6:	f001 fcd3 	bl	80040a0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	68da      	ldr	r2, [r3, #12]
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002702:	425b      	negs	r3, r3
 8002704:	441a      	add	r2, r3
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	68da      	ldr	r2, [r3, #12]
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	429a      	cmp	r2, r3
 8002714:	d207      	bcs.n	8002726 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	425b      	negs	r3, r3
 8002720:	441a      	add	r2, r3
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2b02      	cmp	r3, #2
 800272a:	d105      	bne.n	8002738 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d002      	beq.n	8002738 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	3b01      	subs	r3, #1
 8002736:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8002740:	697b      	ldr	r3, [r7, #20]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3718      	adds	r7, #24
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}

0800274a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800274a:	b580      	push	{r7, lr}
 800274c:	b082      	sub	sp, #8
 800274e:	af00      	add	r7, sp, #0
 8002750:	6078      	str	r0, [r7, #4]
 8002752:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002758:	2b00      	cmp	r3, #0
 800275a:	d018      	beq.n	800278e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68da      	ldr	r2, [r3, #12]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002764:	441a      	add	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	68da      	ldr	r2, [r3, #12]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
 8002772:	429a      	cmp	r2, r3
 8002774:	d303      	bcc.n	800277e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68d9      	ldr	r1, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	461a      	mov	r2, r3
 8002788:	6838      	ldr	r0, [r7, #0]
 800278a:	f001 fc89 	bl	80040a0 <memcpy>
	}
}
 800278e:	bf00      	nop
 8002790:	3708      	adds	r7, #8
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}

08002796 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002796:	b580      	push	{r7, lr}
 8002798:	b084      	sub	sp, #16
 800279a:	af00      	add	r7, sp, #0
 800279c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800279e:	f001 f965 	bl	8003a6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027aa:	e011      	b.n	80027d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d012      	beq.n	80027da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	3324      	adds	r3, #36	@ 0x24
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fc83 	bl	80030c4 <xTaskRemoveFromEventList>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80027c4:	f000 fd5c 	bl	8003280 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80027c8:	7bfb      	ldrb	r3, [r7, #15]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80027d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	dce9      	bgt.n	80027ac <prvUnlockQueue+0x16>
 80027d8:	e000      	b.n	80027dc <prvUnlockQueue+0x46>
					break;
 80027da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	22ff      	movs	r2, #255	@ 0xff
 80027e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80027e4:	f001 f972 	bl	8003acc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80027e8:	f001 f940 	bl	8003a6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027f4:	e011      	b.n	800281a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d012      	beq.n	8002824 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	3310      	adds	r3, #16
 8002802:	4618      	mov	r0, r3
 8002804:	f000 fc5e 	bl	80030c4 <xTaskRemoveFromEventList>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800280e:	f000 fd37 	bl	8003280 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002812:	7bbb      	ldrb	r3, [r7, #14]
 8002814:	3b01      	subs	r3, #1
 8002816:	b2db      	uxtb	r3, r3
 8002818:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800281a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800281e:	2b00      	cmp	r3, #0
 8002820:	dce9      	bgt.n	80027f6 <prvUnlockQueue+0x60>
 8002822:	e000      	b.n	8002826 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002824:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	22ff      	movs	r2, #255	@ 0xff
 800282a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800282e:	f001 f94d 	bl	8003acc <vPortExitCritical>
}
 8002832:	bf00      	nop
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}

0800283a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800283a:	b580      	push	{r7, lr}
 800283c:	b084      	sub	sp, #16
 800283e:	af00      	add	r7, sp, #0
 8002840:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002842:	f001 f913 	bl	8003a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800284a:	2b00      	cmp	r3, #0
 800284c:	d102      	bne.n	8002854 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800284e:	2301      	movs	r3, #1
 8002850:	60fb      	str	r3, [r7, #12]
 8002852:	e001      	b.n	8002858 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002854:	2300      	movs	r3, #0
 8002856:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002858:	f001 f938 	bl	8003acc <vPortExitCritical>

	return xReturn;
 800285c:	68fb      	ldr	r3, [r7, #12]
}
 800285e:	4618      	mov	r0, r3
 8002860:	3710      	adds	r7, #16
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}

08002866 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002866:	b580      	push	{r7, lr}
 8002868:	b084      	sub	sp, #16
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800286e:	f001 f8fd 	bl	8003a6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800287a:	429a      	cmp	r2, r3
 800287c:	d102      	bne.n	8002884 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800287e:	2301      	movs	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
 8002882:	e001      	b.n	8002888 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002884:	2300      	movs	r3, #0
 8002886:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002888:	f001 f920 	bl	8003acc <vPortExitCritical>

	return xReturn;
 800288c:	68fb      	ldr	r3, [r7, #12]
}
 800288e:	4618      	mov	r0, r3
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}

08002896 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002896:	b580      	push	{r7, lr}
 8002898:	b08e      	sub	sp, #56	@ 0x38
 800289a:	af04      	add	r7, sp, #16
 800289c:	60f8      	str	r0, [r7, #12]
 800289e:	60b9      	str	r1, [r7, #8]
 80028a0:	607a      	str	r2, [r7, #4]
 80028a2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10b      	bne.n	80028c2 <xTaskCreateStatic+0x2c>
	__asm volatile
 80028aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ae:	f383 8811 	msr	BASEPRI, r3
 80028b2:	f3bf 8f6f 	isb	sy
 80028b6:	f3bf 8f4f 	dsb	sy
 80028ba:	623b      	str	r3, [r7, #32]
}
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	e7fd      	b.n	80028be <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d10b      	bne.n	80028e0 <xTaskCreateStatic+0x4a>
	__asm volatile
 80028c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028cc:	f383 8811 	msr	BASEPRI, r3
 80028d0:	f3bf 8f6f 	isb	sy
 80028d4:	f3bf 8f4f 	dsb	sy
 80028d8:	61fb      	str	r3, [r7, #28]
}
 80028da:	bf00      	nop
 80028dc:	bf00      	nop
 80028de:	e7fd      	b.n	80028dc <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028e0:	2354      	movs	r3, #84	@ 0x54
 80028e2:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028e4:	693b      	ldr	r3, [r7, #16]
 80028e6:	2b54      	cmp	r3, #84	@ 0x54
 80028e8:	d00b      	beq.n	8002902 <xTaskCreateStatic+0x6c>
	__asm volatile
 80028ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028ee:	f383 8811 	msr	BASEPRI, r3
 80028f2:	f3bf 8f6f 	isb	sy
 80028f6:	f3bf 8f4f 	dsb	sy
 80028fa:	61bb      	str	r3, [r7, #24]
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	e7fd      	b.n	80028fe <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002902:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002904:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002906:	2b00      	cmp	r3, #0
 8002908:	d01e      	beq.n	8002948 <xTaskCreateStatic+0xb2>
 800290a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800290c:	2b00      	cmp	r3, #0
 800290e:	d01b      	beq.n	8002948 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002912:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002916:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002918:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	2202      	movs	r2, #2
 800291e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002922:	2300      	movs	r3, #0
 8002924:	9303      	str	r3, [sp, #12]
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	9302      	str	r3, [sp, #8]
 800292a:	f107 0314 	add.w	r3, r7, #20
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f000 f850 	bl	80029e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002940:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8002942:	f000 f8d5 	bl	8002af0 <prvAddNewTaskToReadyList>
 8002946:	e001      	b.n	800294c <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8002948:	2300      	movs	r3, #0
 800294a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800294c:	697b      	ldr	r3, [r7, #20]
	}
 800294e:	4618      	mov	r0, r3
 8002950:	3728      	adds	r7, #40	@ 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002956:	b580      	push	{r7, lr}
 8002958:	b08c      	sub	sp, #48	@ 0x30
 800295a:	af04      	add	r7, sp, #16
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	603b      	str	r3, [r7, #0]
 8002962:	4613      	mov	r3, r2
 8002964:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002966:	88fb      	ldrh	r3, [r7, #6]
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4618      	mov	r0, r3
 800296c:	f001 f980 	bl	8003c70 <pvPortMalloc>
 8002970:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d00e      	beq.n	8002996 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002978:	2054      	movs	r0, #84	@ 0x54
 800297a:	f001 f979 	bl	8003c70 <pvPortMalloc>
 800297e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d003      	beq.n	800298e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002986:	69fb      	ldr	r3, [r7, #28]
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	631a      	str	r2, [r3, #48]	@ 0x30
 800298c:	e005      	b.n	800299a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800298e:	6978      	ldr	r0, [r7, #20]
 8002990:	f001 fa3c 	bl	8003e0c <vPortFree>
 8002994:	e001      	b.n	800299a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002996:	2300      	movs	r3, #0
 8002998:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800299a:	69fb      	ldr	r3, [r7, #28]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d017      	beq.n	80029d0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029a0:	69fb      	ldr	r3, [r7, #28]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029a8:	88fa      	ldrh	r2, [r7, #6]
 80029aa:	2300      	movs	r3, #0
 80029ac:	9303      	str	r3, [sp, #12]
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	9302      	str	r3, [sp, #8]
 80029b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029b4:	9301      	str	r3, [sp, #4]
 80029b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029b8:	9300      	str	r3, [sp, #0]
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f80e 	bl	80029e0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029c4:	69f8      	ldr	r0, [r7, #28]
 80029c6:	f000 f893 	bl	8002af0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029ca:	2301      	movs	r3, #1
 80029cc:	61bb      	str	r3, [r7, #24]
 80029ce:	e002      	b.n	80029d6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029d0:	f04f 33ff 	mov.w	r3, #4294967295
 80029d4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029d6:	69bb      	ldr	r3, [r7, #24]
	}
 80029d8:	4618      	mov	r0, r3
 80029da:	3720      	adds	r7, #32
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b088      	sub	sp, #32
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80029f8:	3b01      	subs	r3, #1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f023 0307 	bic.w	r3, r3, #7
 8002a06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00b      	beq.n	8002a2a <prvInitialiseNewTask+0x4a>
	__asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	617b      	str	r3, [r7, #20]
}
 8002a24:	bf00      	nop
 8002a26:	bf00      	nop
 8002a28:	e7fd      	b.n	8002a26 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d01f      	beq.n	8002a70 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
 8002a34:	e012      	b.n	8002a5c <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a36:	68ba      	ldr	r2, [r7, #8]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	4413      	add	r3, r2
 8002a3c:	7819      	ldrb	r1, [r3, #0]
 8002a3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	4413      	add	r3, r2
 8002a44:	3334      	adds	r3, #52	@ 0x34
 8002a46:	460a      	mov	r2, r1
 8002a48:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a4a:	68ba      	ldr	r2, [r7, #8]
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	4413      	add	r3, r2
 8002a50:	781b      	ldrb	r3, [r3, #0]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d006      	beq.n	8002a64 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3301      	adds	r3, #1
 8002a5a:	61fb      	str	r3, [r7, #28]
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	2b0f      	cmp	r3, #15
 8002a60:	d9e9      	bls.n	8002a36 <prvInitialiseNewTask+0x56>
 8002a62:	e000      	b.n	8002a66 <prvInitialiseNewTask+0x86>
			{
				break;
 8002a64:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a6e:	e003      	b.n	8002a78 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a72:	2200      	movs	r2, #0
 8002a74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7a:	2b06      	cmp	r3, #6
 8002a7c:	d901      	bls.n	8002a82 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a7e:	2306      	movs	r3, #6
 8002a80:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a86:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a8a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a90:	2200      	movs	r2, #0
 8002a92:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a96:	3304      	adds	r3, #4
 8002a98:	4618      	mov	r0, r3
 8002a9a:	f7ff f8de 	bl	8001c5a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aa0:	3318      	adds	r3, #24
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f7ff f8d9 	bl	8001c5a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002aa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aaa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002aac:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab0:	f1c3 0207 	rsb	r2, r3, #7
 8002ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002abc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002abe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ac4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	68f9      	ldr	r1, [r7, #12]
 8002ad0:	69b8      	ldr	r0, [r7, #24]
 8002ad2:	f000 fedd 	bl	8003890 <pxPortInitialiseStack>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ada:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ae2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002ae4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002ae6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ae8:	bf00      	nop
 8002aea:	3720      	adds	r7, #32
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002af8:	f000 ffb8 	bl	8003a6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002afc:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba8 <prvAddNewTaskToReadyList+0xb8>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	4a29      	ldr	r2, [pc, #164]	@ (8002ba8 <prvAddNewTaskToReadyList+0xb8>)
 8002b04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b06:	4b29      	ldr	r3, [pc, #164]	@ (8002bac <prvAddNewTaskToReadyList+0xbc>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b0e:	4a27      	ldr	r2, [pc, #156]	@ (8002bac <prvAddNewTaskToReadyList+0xbc>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b14:	4b24      	ldr	r3, [pc, #144]	@ (8002ba8 <prvAddNewTaskToReadyList+0xb8>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d110      	bne.n	8002b3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b1c:	f000 fbd4 	bl	80032c8 <prvInitialiseTaskLists>
 8002b20:	e00d      	b.n	8002b3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b22:	4b23      	ldr	r3, [pc, #140]	@ (8002bb0 <prvAddNewTaskToReadyList+0xc0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b2a:	4b20      	ldr	r3, [pc, #128]	@ (8002bac <prvAddNewTaskToReadyList+0xbc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d802      	bhi.n	8002b3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b38:	4a1c      	ldr	r2, [pc, #112]	@ (8002bac <prvAddNewTaskToReadyList+0xbc>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b3e:	4b1d      	ldr	r3, [pc, #116]	@ (8002bb4 <prvAddNewTaskToReadyList+0xc4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	4a1b      	ldr	r2, [pc, #108]	@ (8002bb4 <prvAddNewTaskToReadyList+0xc4>)
 8002b46:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <prvAddNewTaskToReadyList+0xc8>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	4a18      	ldr	r2, [pc, #96]	@ (8002bb8 <prvAddNewTaskToReadyList+0xc8>)
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4a15      	ldr	r2, [pc, #84]	@ (8002bbc <prvAddNewTaskToReadyList+0xcc>)
 8002b68:	441a      	add	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3304      	adds	r3, #4
 8002b6e:	4619      	mov	r1, r3
 8002b70:	4610      	mov	r0, r2
 8002b72:	f7ff f87e 	bl	8001c72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b76:	f000 ffa9 	bl	8003acc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb0 <prvAddNewTaskToReadyList+0xc0>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00e      	beq.n	8002ba0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b82:	4b0a      	ldr	r3, [pc, #40]	@ (8002bac <prvAddNewTaskToReadyList+0xbc>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d207      	bcs.n	8002ba0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b90:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc0 <prvAddNewTaskToReadyList+0xd0>)
 8002b92:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b96:	601a      	str	r2, [r3, #0]
 8002b98:	f3bf 8f4f 	dsb	sy
 8002b9c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ba0:	bf00      	nop
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	200003e4 	.word	0x200003e4
 8002bac:	200002e4 	.word	0x200002e4
 8002bb0:	200003f0 	.word	0x200003f0
 8002bb4:	20000400 	.word	0x20000400
 8002bb8:	200003ec 	.word	0x200003ec
 8002bbc:	200002e8 	.word	0x200002e8
 8002bc0:	e000ed04 	.word	0xe000ed04

08002bc4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d018      	beq.n	8002c08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002bd6:	4b14      	ldr	r3, [pc, #80]	@ (8002c28 <vTaskDelay+0x64>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d00b      	beq.n	8002bf6 <vTaskDelay+0x32>
	__asm volatile
 8002bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002be2:	f383 8811 	msr	BASEPRI, r3
 8002be6:	f3bf 8f6f 	isb	sy
 8002bea:	f3bf 8f4f 	dsb	sy
 8002bee:	60bb      	str	r3, [r7, #8]
}
 8002bf0:	bf00      	nop
 8002bf2:	bf00      	nop
 8002bf4:	e7fd      	b.n	8002bf2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002bf6:	f000 f87d 	bl	8002cf4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002bfa:	2100      	movs	r1, #0
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 fde1 	bl	80037c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c02:	f000 f885 	bl	8002d10 <xTaskResumeAll>
 8002c06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d107      	bne.n	8002c1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8002c0e:	4b07      	ldr	r3, [pc, #28]	@ (8002c2c <vTaskDelay+0x68>)
 8002c10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c14:	601a      	str	r2, [r3, #0]
 8002c16:	f3bf 8f4f 	dsb	sy
 8002c1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c1e:	bf00      	nop
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	2000040c 	.word	0x2000040c
 8002c2c:	e000ed04 	.word	0xe000ed04

08002c30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b08a      	sub	sp, #40	@ 0x28
 8002c34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c36:	2300      	movs	r3, #0
 8002c38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c3e:	463a      	mov	r2, r7
 8002c40:	1d39      	adds	r1, r7, #4
 8002c42:	f107 0308 	add.w	r3, r7, #8
 8002c46:	4618      	mov	r0, r3
 8002c48:	f7fd fa82 	bl	8000150 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c4c:	6839      	ldr	r1, [r7, #0]
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	68ba      	ldr	r2, [r7, #8]
 8002c52:	9202      	str	r2, [sp, #8]
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	2300      	movs	r3, #0
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	460a      	mov	r2, r1
 8002c5e:	491f      	ldr	r1, [pc, #124]	@ (8002cdc <vTaskStartScheduler+0xac>)
 8002c60:	481f      	ldr	r0, [pc, #124]	@ (8002ce0 <vTaskStartScheduler+0xb0>)
 8002c62:	f7ff fe18 	bl	8002896 <xTaskCreateStatic>
 8002c66:	4603      	mov	r3, r0
 8002c68:	4a1e      	ldr	r2, [pc, #120]	@ (8002ce4 <vTaskStartScheduler+0xb4>)
 8002c6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8002ce4 <vTaskStartScheduler+0xb4>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d002      	beq.n	8002c7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c74:	2301      	movs	r3, #1
 8002c76:	617b      	str	r3, [r7, #20]
 8002c78:	e001      	b.n	8002c7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d116      	bne.n	8002cb2 <vTaskStartScheduler+0x82>
	__asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	613b      	str	r3, [r7, #16]
}
 8002c96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002c98:	4b13      	ldr	r3, [pc, #76]	@ (8002ce8 <vTaskStartScheduler+0xb8>)
 8002c9a:	f04f 32ff 	mov.w	r2, #4294967295
 8002c9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002ca0:	4b12      	ldr	r3, [pc, #72]	@ (8002cec <vTaskStartScheduler+0xbc>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002ca6:	4b12      	ldr	r3, [pc, #72]	@ (8002cf0 <vTaskStartScheduler+0xc0>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002cac:	f000 fe6c 	bl	8003988 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002cb0:	e00f      	b.n	8002cd2 <vTaskStartScheduler+0xa2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb8:	d10b      	bne.n	8002cd2 <vTaskStartScheduler+0xa2>
	__asm volatile
 8002cba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002cbe:	f383 8811 	msr	BASEPRI, r3
 8002cc2:	f3bf 8f6f 	isb	sy
 8002cc6:	f3bf 8f4f 	dsb	sy
 8002cca:	60fb      	str	r3, [r7, #12]
}
 8002ccc:	bf00      	nop
 8002cce:	bf00      	nop
 8002cd0:	e7fd      	b.n	8002cce <vTaskStartScheduler+0x9e>
}
 8002cd2:	bf00      	nop
 8002cd4:	3718      	adds	r7, #24
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	08004180 	.word	0x08004180
 8002ce0:	08003299 	.word	0x08003299
 8002ce4:	20000408 	.word	0x20000408
 8002ce8:	20000404 	.word	0x20000404
 8002cec:	200003f0 	.word	0x200003f0
 8002cf0:	200003e8 	.word	0x200003e8

08002cf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002cf8:	4b04      	ldr	r3, [pc, #16]	@ (8002d0c <vTaskSuspendAll+0x18>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	4a03      	ldr	r2, [pc, #12]	@ (8002d0c <vTaskSuspendAll+0x18>)
 8002d00:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d02:	bf00      	nop
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bc80      	pop	{r7}
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	2000040c 	.word	0x2000040c

08002d10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d16:	2300      	movs	r3, #0
 8002d18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d1e:	4b42      	ldr	r3, [pc, #264]	@ (8002e28 <xTaskResumeAll+0x118>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d10b      	bne.n	8002d3e <xTaskResumeAll+0x2e>
	__asm volatile
 8002d26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d2a:	f383 8811 	msr	BASEPRI, r3
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	603b      	str	r3, [r7, #0]
}
 8002d38:	bf00      	nop
 8002d3a:	bf00      	nop
 8002d3c:	e7fd      	b.n	8002d3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d3e:	f000 fe95 	bl	8003a6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d42:	4b39      	ldr	r3, [pc, #228]	@ (8002e28 <xTaskResumeAll+0x118>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	4a37      	ldr	r2, [pc, #220]	@ (8002e28 <xTaskResumeAll+0x118>)
 8002d4a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d4c:	4b36      	ldr	r3, [pc, #216]	@ (8002e28 <xTaskResumeAll+0x118>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d161      	bne.n	8002e18 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d54:	4b35      	ldr	r3, [pc, #212]	@ (8002e2c <xTaskResumeAll+0x11c>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d05d      	beq.n	8002e18 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d5c:	e02e      	b.n	8002dbc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d5e:	4b34      	ldr	r3, [pc, #208]	@ (8002e30 <xTaskResumeAll+0x120>)
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	3318      	adds	r3, #24
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fe ffdc 	bl	8001d28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	3304      	adds	r3, #4
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7fe ffd7 	bl	8001d28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d7e:	2201      	movs	r2, #1
 8002d80:	409a      	lsls	r2, r3
 8002d82:	4b2c      	ldr	r3, [pc, #176]	@ (8002e34 <xTaskResumeAll+0x124>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4313      	orrs	r3, r2
 8002d88:	4a2a      	ldr	r2, [pc, #168]	@ (8002e34 <xTaskResumeAll+0x124>)
 8002d8a:	6013      	str	r3, [r2, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4a27      	ldr	r2, [pc, #156]	@ (8002e38 <xTaskResumeAll+0x128>)
 8002d9a:	441a      	add	r2, r3
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	3304      	adds	r3, #4
 8002da0:	4619      	mov	r1, r3
 8002da2:	4610      	mov	r0, r2
 8002da4:	f7fe ff65 	bl	8001c72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002dac:	4b23      	ldr	r3, [pc, #140]	@ (8002e3c <xTaskResumeAll+0x12c>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db2:	429a      	cmp	r2, r3
 8002db4:	d302      	bcc.n	8002dbc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002db6:	4b22      	ldr	r3, [pc, #136]	@ (8002e40 <xTaskResumeAll+0x130>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8002e30 <xTaskResumeAll+0x120>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1cc      	bne.n	8002d5e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002dca:	f000 fb1b 	bl	8003404 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002dce:	4b1d      	ldr	r3, [pc, #116]	@ (8002e44 <xTaskResumeAll+0x134>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d010      	beq.n	8002dfc <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dda:	f000 f837 	bl	8002e4c <xTaskIncrementTick>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d002      	beq.n	8002dea <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002de4:	4b16      	ldr	r3, [pc, #88]	@ (8002e40 <xTaskResumeAll+0x130>)
 8002de6:	2201      	movs	r2, #1
 8002de8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f1      	bne.n	8002dda <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002df6:	4b13      	ldr	r3, [pc, #76]	@ (8002e44 <xTaskResumeAll+0x134>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002dfc:	4b10      	ldr	r3, [pc, #64]	@ (8002e40 <xTaskResumeAll+0x130>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d009      	beq.n	8002e18 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e04:	2301      	movs	r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <xTaskResumeAll+0x138>)
 8002e0a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e0e:	601a      	str	r2, [r3, #0]
 8002e10:	f3bf 8f4f 	dsb	sy
 8002e14:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e18:	f000 fe58 	bl	8003acc <vPortExitCritical>

	return xAlreadyYielded;
 8002e1c:	68bb      	ldr	r3, [r7, #8]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	2000040c 	.word	0x2000040c
 8002e2c:	200003e4 	.word	0x200003e4
 8002e30:	200003a4 	.word	0x200003a4
 8002e34:	200003ec 	.word	0x200003ec
 8002e38:	200002e8 	.word	0x200002e8
 8002e3c:	200002e4 	.word	0x200002e4
 8002e40:	200003f8 	.word	0x200003f8
 8002e44:	200003f4 	.word	0x200003f4
 8002e48:	e000ed04 	.word	0xe000ed04

08002e4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b086      	sub	sp, #24
 8002e50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e52:	2300      	movs	r3, #0
 8002e54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e56:	4b4f      	ldr	r3, [pc, #316]	@ (8002f94 <xTaskIncrementTick+0x148>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	f040 808f 	bne.w	8002f7e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e60:	4b4d      	ldr	r3, [pc, #308]	@ (8002f98 <xTaskIncrementTick+0x14c>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	3301      	adds	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e68:	4a4b      	ldr	r2, [pc, #300]	@ (8002f98 <xTaskIncrementTick+0x14c>)
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d121      	bne.n	8002eb8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8002e74:	4b49      	ldr	r3, [pc, #292]	@ (8002f9c <xTaskIncrementTick+0x150>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <xTaskIncrementTick+0x4a>
	__asm volatile
 8002e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e82:	f383 8811 	msr	BASEPRI, r3
 8002e86:	f3bf 8f6f 	isb	sy
 8002e8a:	f3bf 8f4f 	dsb	sy
 8002e8e:	603b      	str	r3, [r7, #0]
}
 8002e90:	bf00      	nop
 8002e92:	bf00      	nop
 8002e94:	e7fd      	b.n	8002e92 <xTaskIncrementTick+0x46>
 8002e96:	4b41      	ldr	r3, [pc, #260]	@ (8002f9c <xTaskIncrementTick+0x150>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	4b40      	ldr	r3, [pc, #256]	@ (8002fa0 <xTaskIncrementTick+0x154>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a3e      	ldr	r2, [pc, #248]	@ (8002f9c <xTaskIncrementTick+0x150>)
 8002ea2:	6013      	str	r3, [r2, #0]
 8002ea4:	4a3e      	ldr	r2, [pc, #248]	@ (8002fa0 <xTaskIncrementTick+0x154>)
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b3e      	ldr	r3, [pc, #248]	@ (8002fa4 <xTaskIncrementTick+0x158>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	3301      	adds	r3, #1
 8002eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8002fa4 <xTaskIncrementTick+0x158>)
 8002eb2:	6013      	str	r3, [r2, #0]
 8002eb4:	f000 faa6 	bl	8003404 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa8 <xTaskIncrementTick+0x15c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	429a      	cmp	r2, r3
 8002ec0:	d348      	bcc.n	8002f54 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ec2:	4b36      	ldr	r3, [pc, #216]	@ (8002f9c <xTaskIncrementTick+0x150>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d104      	bne.n	8002ed6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ecc:	4b36      	ldr	r3, [pc, #216]	@ (8002fa8 <xTaskIncrementTick+0x15c>)
 8002ece:	f04f 32ff 	mov.w	r2, #4294967295
 8002ed2:	601a      	str	r2, [r3, #0]
					break;
 8002ed4:	e03e      	b.n	8002f54 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ed6:	4b31      	ldr	r3, [pc, #196]	@ (8002f9c <xTaskIncrementTick+0x150>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	68db      	ldr	r3, [r3, #12]
 8002edc:	68db      	ldr	r3, [r3, #12]
 8002ede:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002ee6:	693a      	ldr	r2, [r7, #16]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	429a      	cmp	r2, r3
 8002eec:	d203      	bcs.n	8002ef6 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002eee:	4a2e      	ldr	r2, [pc, #184]	@ (8002fa8 <xTaskIncrementTick+0x15c>)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002ef4:	e02e      	b.n	8002f54 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002ef6:	68bb      	ldr	r3, [r7, #8]
 8002ef8:	3304      	adds	r3, #4
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe ff14 	bl	8001d28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d004      	beq.n	8002f12 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3318      	adds	r3, #24
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f7fe ff0b 	bl	8001d28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f16:	2201      	movs	r2, #1
 8002f18:	409a      	lsls	r2, r3
 8002f1a:	4b24      	ldr	r3, [pc, #144]	@ (8002fac <xTaskIncrementTick+0x160>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	4a22      	ldr	r2, [pc, #136]	@ (8002fac <xTaskIncrementTick+0x160>)
 8002f22:	6013      	str	r3, [r2, #0]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4a1f      	ldr	r2, [pc, #124]	@ (8002fb0 <xTaskIncrementTick+0x164>)
 8002f32:	441a      	add	r2, r3
 8002f34:	68bb      	ldr	r3, [r7, #8]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f7fe fe99 	bl	8001c72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f44:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb4 <xTaskIncrementTick+0x168>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	d3b9      	bcc.n	8002ec2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f52:	e7b6      	b.n	8002ec2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f54:	4b17      	ldr	r3, [pc, #92]	@ (8002fb4 <xTaskIncrementTick+0x168>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f5a:	4915      	ldr	r1, [pc, #84]	@ (8002fb0 <xTaskIncrementTick+0x164>)
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4413      	add	r3, r2
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	440b      	add	r3, r1
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d901      	bls.n	8002f70 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002f70:	4b11      	ldr	r3, [pc, #68]	@ (8002fb8 <xTaskIncrementTick+0x16c>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d007      	beq.n	8002f88 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	617b      	str	r3, [r7, #20]
 8002f7c:	e004      	b.n	8002f88 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8002fbc <xTaskIncrementTick+0x170>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	3301      	adds	r3, #1
 8002f84:	4a0d      	ldr	r2, [pc, #52]	@ (8002fbc <xTaskIncrementTick+0x170>)
 8002f86:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002f88:	697b      	ldr	r3, [r7, #20]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	2000040c 	.word	0x2000040c
 8002f98:	200003e8 	.word	0x200003e8
 8002f9c:	2000039c 	.word	0x2000039c
 8002fa0:	200003a0 	.word	0x200003a0
 8002fa4:	200003fc 	.word	0x200003fc
 8002fa8:	20000404 	.word	0x20000404
 8002fac:	200003ec 	.word	0x200003ec
 8002fb0:	200002e8 	.word	0x200002e8
 8002fb4:	200002e4 	.word	0x200002e4
 8002fb8:	200003f8 	.word	0x200003f8
 8002fbc:	200003f4 	.word	0x200003f4

08002fc0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b087      	sub	sp, #28
 8002fc4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002fc6:	4b27      	ldr	r3, [pc, #156]	@ (8003064 <vTaskSwitchContext+0xa4>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d003      	beq.n	8002fd6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002fce:	4b26      	ldr	r3, [pc, #152]	@ (8003068 <vTaskSwitchContext+0xa8>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002fd4:	e040      	b.n	8003058 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8002fd6:	4b24      	ldr	r3, [pc, #144]	@ (8003068 <vTaskSwitchContext+0xa8>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002fdc:	4b23      	ldr	r3, [pc, #140]	@ (800306c <vTaskSwitchContext+0xac>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	fab3 f383 	clz	r3, r3
 8002fe8:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8002fea:	7afb      	ldrb	r3, [r7, #11]
 8002fec:	f1c3 031f 	rsb	r3, r3, #31
 8002ff0:	617b      	str	r3, [r7, #20]
 8002ff2:	491f      	ldr	r1, [pc, #124]	@ (8003070 <vTaskSwitchContext+0xb0>)
 8002ff4:	697a      	ldr	r2, [r7, #20]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10b      	bne.n	800301e <vTaskSwitchContext+0x5e>
	__asm volatile
 8003006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800300a:	f383 8811 	msr	BASEPRI, r3
 800300e:	f3bf 8f6f 	isb	sy
 8003012:	f3bf 8f4f 	dsb	sy
 8003016:	607b      	str	r3, [r7, #4]
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	e7fd      	b.n	800301a <vTaskSwitchContext+0x5a>
 800301e:	697a      	ldr	r2, [r7, #20]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4a11      	ldr	r2, [pc, #68]	@ (8003070 <vTaskSwitchContext+0xb0>)
 800302a:	4413      	add	r3, r2
 800302c:	613b      	str	r3, [r7, #16]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	685a      	ldr	r2, [r3, #4]
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	3308      	adds	r3, #8
 8003040:	429a      	cmp	r2, r3
 8003042:	d104      	bne.n	800304e <vTaskSwitchContext+0x8e>
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	605a      	str	r2, [r3, #4]
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	4a07      	ldr	r2, [pc, #28]	@ (8003074 <vTaskSwitchContext+0xb4>)
 8003056:	6013      	str	r3, [r2, #0]
}
 8003058:	bf00      	nop
 800305a:	371c      	adds	r7, #28
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	2000040c 	.word	0x2000040c
 8003068:	200003f8 	.word	0x200003f8
 800306c:	200003ec 	.word	0x200003ec
 8003070:	200002e8 	.word	0x200002e8
 8003074:	200002e4 	.word	0x200002e4

08003078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b084      	sub	sp, #16
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d10b      	bne.n	80030a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800308c:	f383 8811 	msr	BASEPRI, r3
 8003090:	f3bf 8f6f 	isb	sy
 8003094:	f3bf 8f4f 	dsb	sy
 8003098:	60fb      	str	r3, [r7, #12]
}
 800309a:	bf00      	nop
 800309c:	bf00      	nop
 800309e:	e7fd      	b.n	800309c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030a0:	4b07      	ldr	r3, [pc, #28]	@ (80030c0 <vTaskPlaceOnEventList+0x48>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	3318      	adds	r3, #24
 80030a6:	4619      	mov	r1, r3
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f7fe fe05 	bl	8001cb8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030ae:	2101      	movs	r1, #1
 80030b0:	6838      	ldr	r0, [r7, #0]
 80030b2:	f000 fb87 	bl	80037c4 <prvAddCurrentTaskToDelayedList>
}
 80030b6:	bf00      	nop
 80030b8:	3710      	adds	r7, #16
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	200002e4 	.word	0x200002e4

080030c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b086      	sub	sp, #24
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10b      	bne.n	80030f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80030da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030de:	f383 8811 	msr	BASEPRI, r3
 80030e2:	f3bf 8f6f 	isb	sy
 80030e6:	f3bf 8f4f 	dsb	sy
 80030ea:	60fb      	str	r3, [r7, #12]
}
 80030ec:	bf00      	nop
 80030ee:	bf00      	nop
 80030f0:	e7fd      	b.n	80030ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	3318      	adds	r3, #24
 80030f6:	4618      	mov	r0, r3
 80030f8:	f7fe fe16 	bl	8001d28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003174 <xTaskRemoveFromEventList+0xb0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d11c      	bne.n	800313e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	3304      	adds	r3, #4
 8003108:	4618      	mov	r0, r3
 800310a:	f7fe fe0d 	bl	8001d28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003112:	2201      	movs	r2, #1
 8003114:	409a      	lsls	r2, r3
 8003116:	4b18      	ldr	r3, [pc, #96]	@ (8003178 <xTaskRemoveFromEventList+0xb4>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4313      	orrs	r3, r2
 800311c:	4a16      	ldr	r2, [pc, #88]	@ (8003178 <xTaskRemoveFromEventList+0xb4>)
 800311e:	6013      	str	r3, [r2, #0]
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003124:	4613      	mov	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	4413      	add	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4a13      	ldr	r2, [pc, #76]	@ (800317c <xTaskRemoveFromEventList+0xb8>)
 800312e:	441a      	add	r2, r3
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	3304      	adds	r3, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f7fe fd9b 	bl	8001c72 <vListInsertEnd>
 800313c:	e005      	b.n	800314a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	3318      	adds	r3, #24
 8003142:	4619      	mov	r1, r3
 8003144:	480e      	ldr	r0, [pc, #56]	@ (8003180 <xTaskRemoveFromEventList+0xbc>)
 8003146:	f7fe fd94 	bl	8001c72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314e:	4b0d      	ldr	r3, [pc, #52]	@ (8003184 <xTaskRemoveFromEventList+0xc0>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	429a      	cmp	r2, r3
 8003156:	d905      	bls.n	8003164 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003158:	2301      	movs	r3, #1
 800315a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800315c:	4b0a      	ldr	r3, [pc, #40]	@ (8003188 <xTaskRemoveFromEventList+0xc4>)
 800315e:	2201      	movs	r2, #1
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	e001      	b.n	8003168 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003164:	2300      	movs	r3, #0
 8003166:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003168:	697b      	ldr	r3, [r7, #20]
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	2000040c 	.word	0x2000040c
 8003178:	200003ec 	.word	0x200003ec
 800317c:	200002e8 	.word	0x200002e8
 8003180:	200003a4 	.word	0x200003a4
 8003184:	200002e4 	.word	0x200002e4
 8003188:	200003f8 	.word	0x200003f8

0800318c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003194:	4b06      	ldr	r3, [pc, #24]	@ (80031b0 <vTaskInternalSetTimeOutState+0x24>)
 8003196:	681a      	ldr	r2, [r3, #0]
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800319c:	4b05      	ldr	r3, [pc, #20]	@ (80031b4 <vTaskInternalSetTimeOutState+0x28>)
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	605a      	str	r2, [r3, #4]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bc80      	pop	{r7}
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	200003fc 	.word	0x200003fc
 80031b4:	200003e8 	.word	0x200003e8

080031b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b088      	sub	sp, #32
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d10b      	bne.n	80031e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80031c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031cc:	f383 8811 	msr	BASEPRI, r3
 80031d0:	f3bf 8f6f 	isb	sy
 80031d4:	f3bf 8f4f 	dsb	sy
 80031d8:	613b      	str	r3, [r7, #16]
}
 80031da:	bf00      	nop
 80031dc:	bf00      	nop
 80031de:	e7fd      	b.n	80031dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10b      	bne.n	80031fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80031e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031ea:	f383 8811 	msr	BASEPRI, r3
 80031ee:	f3bf 8f6f 	isb	sy
 80031f2:	f3bf 8f4f 	dsb	sy
 80031f6:	60fb      	str	r3, [r7, #12]
}
 80031f8:	bf00      	nop
 80031fa:	bf00      	nop
 80031fc:	e7fd      	b.n	80031fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80031fe:	f000 fc35 	bl	8003a6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003202:	4b1d      	ldr	r3, [pc, #116]	@ (8003278 <xTaskCheckForTimeOut+0xc0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	1ad3      	subs	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321a:	d102      	bne.n	8003222 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800321c:	2300      	movs	r3, #0
 800321e:	61fb      	str	r3, [r7, #28]
 8003220:	e023      	b.n	800326a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681a      	ldr	r2, [r3, #0]
 8003226:	4b15      	ldr	r3, [pc, #84]	@ (800327c <xTaskCheckForTimeOut+0xc4>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	429a      	cmp	r2, r3
 800322c:	d007      	beq.n	800323e <xTaskCheckForTimeOut+0x86>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	69ba      	ldr	r2, [r7, #24]
 8003234:	429a      	cmp	r2, r3
 8003236:	d302      	bcc.n	800323e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003238:	2301      	movs	r3, #1
 800323a:	61fb      	str	r3, [r7, #28]
 800323c:	e015      	b.n	800326a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	429a      	cmp	r2, r3
 8003246:	d20b      	bcs.n	8003260 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003248:	683b      	ldr	r3, [r7, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	1ad2      	subs	r2, r2, r3
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff99 	bl	800318c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800325a:	2300      	movs	r3, #0
 800325c:	61fb      	str	r3, [r7, #28]
 800325e:	e004      	b.n	800326a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003266:	2301      	movs	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800326a:	f000 fc2f 	bl	8003acc <vPortExitCritical>

	return xReturn;
 800326e:	69fb      	ldr	r3, [r7, #28]
}
 8003270:	4618      	mov	r0, r3
 8003272:	3720      	adds	r7, #32
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	200003e8 	.word	0x200003e8
 800327c:	200003fc 	.word	0x200003fc

08003280 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003284:	4b03      	ldr	r3, [pc, #12]	@ (8003294 <vTaskMissedYield+0x14>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]
}
 800328a:	bf00      	nop
 800328c:	46bd      	mov	sp, r7
 800328e:	bc80      	pop	{r7}
 8003290:	4770      	bx	lr
 8003292:	bf00      	nop
 8003294:	200003f8 	.word	0x200003f8

08003298 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80032a0:	f000 f852 	bl	8003348 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80032a4:	4b06      	ldr	r3, [pc, #24]	@ (80032c0 <prvIdleTask+0x28>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	2b01      	cmp	r3, #1
 80032aa:	d9f9      	bls.n	80032a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80032ac:	4b05      	ldr	r3, [pc, #20]	@ (80032c4 <prvIdleTask+0x2c>)
 80032ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032b2:	601a      	str	r2, [r3, #0]
 80032b4:	f3bf 8f4f 	dsb	sy
 80032b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80032bc:	e7f0      	b.n	80032a0 <prvIdleTask+0x8>
 80032be:	bf00      	nop
 80032c0:	200002e8 	.word	0x200002e8
 80032c4:	e000ed04 	.word	0xe000ed04

080032c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032ce:	2300      	movs	r3, #0
 80032d0:	607b      	str	r3, [r7, #4]
 80032d2:	e00c      	b.n	80032ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	4a12      	ldr	r2, [pc, #72]	@ (8003328 <prvInitialiseTaskLists+0x60>)
 80032e0:	4413      	add	r3, r2
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fe fc9a 	bl	8001c1c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	3301      	adds	r3, #1
 80032ec:	607b      	str	r3, [r7, #4]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2b06      	cmp	r3, #6
 80032f2:	d9ef      	bls.n	80032d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80032f4:	480d      	ldr	r0, [pc, #52]	@ (800332c <prvInitialiseTaskLists+0x64>)
 80032f6:	f7fe fc91 	bl	8001c1c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80032fa:	480d      	ldr	r0, [pc, #52]	@ (8003330 <prvInitialiseTaskLists+0x68>)
 80032fc:	f7fe fc8e 	bl	8001c1c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003300:	480c      	ldr	r0, [pc, #48]	@ (8003334 <prvInitialiseTaskLists+0x6c>)
 8003302:	f7fe fc8b 	bl	8001c1c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003306:	480c      	ldr	r0, [pc, #48]	@ (8003338 <prvInitialiseTaskLists+0x70>)
 8003308:	f7fe fc88 	bl	8001c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800330c:	480b      	ldr	r0, [pc, #44]	@ (800333c <prvInitialiseTaskLists+0x74>)
 800330e:	f7fe fc85 	bl	8001c1c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003312:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <prvInitialiseTaskLists+0x78>)
 8003314:	4a05      	ldr	r2, [pc, #20]	@ (800332c <prvInitialiseTaskLists+0x64>)
 8003316:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003318:	4b0a      	ldr	r3, [pc, #40]	@ (8003344 <prvInitialiseTaskLists+0x7c>)
 800331a:	4a05      	ldr	r2, [pc, #20]	@ (8003330 <prvInitialiseTaskLists+0x68>)
 800331c:	601a      	str	r2, [r3, #0]
}
 800331e:	bf00      	nop
 8003320:	3708      	adds	r7, #8
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	200002e8 	.word	0x200002e8
 800332c:	20000374 	.word	0x20000374
 8003330:	20000388 	.word	0x20000388
 8003334:	200003a4 	.word	0x200003a4
 8003338:	200003b8 	.word	0x200003b8
 800333c:	200003d0 	.word	0x200003d0
 8003340:	2000039c 	.word	0x2000039c
 8003344:	200003a0 	.word	0x200003a0

08003348 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800334e:	e019      	b.n	8003384 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003350:	f000 fb8c 	bl	8003a6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003354:	4b10      	ldr	r3, [pc, #64]	@ (8003398 <prvCheckTasksWaitingTermination+0x50>)
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	3304      	adds	r3, #4
 8003360:	4618      	mov	r0, r3
 8003362:	f7fe fce1 	bl	8001d28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003366:	4b0d      	ldr	r3, [pc, #52]	@ (800339c <prvCheckTasksWaitingTermination+0x54>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	3b01      	subs	r3, #1
 800336c:	4a0b      	ldr	r2, [pc, #44]	@ (800339c <prvCheckTasksWaitingTermination+0x54>)
 800336e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003370:	4b0b      	ldr	r3, [pc, #44]	@ (80033a0 <prvCheckTasksWaitingTermination+0x58>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	3b01      	subs	r3, #1
 8003376:	4a0a      	ldr	r2, [pc, #40]	@ (80033a0 <prvCheckTasksWaitingTermination+0x58>)
 8003378:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800337a:	f000 fba7 	bl	8003acc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f810 	bl	80033a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003384:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <prvCheckTasksWaitingTermination+0x58>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1e1      	bne.n	8003350 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800338c:	bf00      	nop
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	200003b8 	.word	0x200003b8
 800339c:	200003e4 	.word	0x200003e4
 80033a0:	200003cc 	.word	0x200003cc

080033a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b084      	sub	sp, #16
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d108      	bne.n	80033c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ba:	4618      	mov	r0, r3
 80033bc:	f000 fd26 	bl	8003e0c <vPortFree>
				vPortFree( pxTCB );
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 fd23 	bl	8003e0c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80033c6:	e019      	b.n	80033fc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d103      	bne.n	80033da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f000 fd1a 	bl	8003e0c <vPortFree>
	}
 80033d8:	e010      	b.n	80033fc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d00b      	beq.n	80033fc <prvDeleteTCB+0x58>
	__asm volatile
 80033e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033e8:	f383 8811 	msr	BASEPRI, r3
 80033ec:	f3bf 8f6f 	isb	sy
 80033f0:	f3bf 8f4f 	dsb	sy
 80033f4:	60fb      	str	r3, [r7, #12]
}
 80033f6:	bf00      	nop
 80033f8:	bf00      	nop
 80033fa:	e7fd      	b.n	80033f8 <prvDeleteTCB+0x54>
	}
 80033fc:	bf00      	nop
 80033fe:	3710      	adds	r7, #16
 8003400:	46bd      	mov	sp, r7
 8003402:	bd80      	pop	{r7, pc}

08003404 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800340a:	4b0c      	ldr	r3, [pc, #48]	@ (800343c <prvResetNextTaskUnblockTime+0x38>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003414:	4b0a      	ldr	r3, [pc, #40]	@ (8003440 <prvResetNextTaskUnblockTime+0x3c>)
 8003416:	f04f 32ff 	mov.w	r2, #4294967295
 800341a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800341c:	e008      	b.n	8003430 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800341e:	4b07      	ldr	r3, [pc, #28]	@ (800343c <prvResetNextTaskUnblockTime+0x38>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68db      	ldr	r3, [r3, #12]
 8003424:	68db      	ldr	r3, [r3, #12]
 8003426:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4a04      	ldr	r2, [pc, #16]	@ (8003440 <prvResetNextTaskUnblockTime+0x3c>)
 800342e:	6013      	str	r3, [r2, #0]
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	2000039c 	.word	0x2000039c
 8003440:	20000404 	.word	0x20000404

08003444 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800344a:	4b0b      	ldr	r3, [pc, #44]	@ (8003478 <xTaskGetSchedulerState+0x34>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d102      	bne.n	8003458 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003452:	2301      	movs	r3, #1
 8003454:	607b      	str	r3, [r7, #4]
 8003456:	e008      	b.n	800346a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003458:	4b08      	ldr	r3, [pc, #32]	@ (800347c <xTaskGetSchedulerState+0x38>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d102      	bne.n	8003466 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003460:	2302      	movs	r3, #2
 8003462:	607b      	str	r3, [r7, #4]
 8003464:	e001      	b.n	800346a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003466:	2300      	movs	r3, #0
 8003468:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800346a:	687b      	ldr	r3, [r7, #4]
	}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	200003f0 	.word	0x200003f0
 800347c:	2000040c 	.word	0x2000040c

08003480 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003480:	b580      	push	{r7, lr}
 8003482:	b084      	sub	sp, #16
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d05e      	beq.n	8003554 <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800349a:	4b31      	ldr	r3, [pc, #196]	@ (8003560 <xTaskPriorityInherit+0xe0>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d24e      	bcs.n	8003542 <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	699b      	ldr	r3, [r3, #24]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	db06      	blt.n	80034ba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003560 <xTaskPriorityInherit+0xe0>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b2:	f1c3 0207 	rsb	r2, r3, #7
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	6959      	ldr	r1, [r3, #20]
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4a26      	ldr	r2, [pc, #152]	@ (8003564 <xTaskPriorityInherit+0xe4>)
 80034cc:	4413      	add	r3, r2
 80034ce:	4299      	cmp	r1, r3
 80034d0:	d12f      	bne.n	8003532 <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80034d2:	68bb      	ldr	r3, [r7, #8]
 80034d4:	3304      	adds	r3, #4
 80034d6:	4618      	mov	r0, r3
 80034d8:	f7fe fc26 	bl	8001d28 <uxListRemove>
 80034dc:	4603      	mov	r3, r0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10a      	bne.n	80034f8 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034e6:	2201      	movs	r2, #1
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	43da      	mvns	r2, r3
 80034ee:	4b1e      	ldr	r3, [pc, #120]	@ (8003568 <xTaskPriorityInherit+0xe8>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4013      	ands	r3, r2
 80034f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003568 <xTaskPriorityInherit+0xe8>)
 80034f6:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80034f8:	4b19      	ldr	r3, [pc, #100]	@ (8003560 <xTaskPriorityInherit+0xe0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003506:	2201      	movs	r2, #1
 8003508:	409a      	lsls	r2, r3
 800350a:	4b17      	ldr	r3, [pc, #92]	@ (8003568 <xTaskPriorityInherit+0xe8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4313      	orrs	r3, r2
 8003510:	4a15      	ldr	r2, [pc, #84]	@ (8003568 <xTaskPriorityInherit+0xe8>)
 8003512:	6013      	str	r3, [r2, #0]
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	009b      	lsls	r3, r3, #2
 8003520:	4a10      	ldr	r2, [pc, #64]	@ (8003564 <xTaskPriorityInherit+0xe4>)
 8003522:	441a      	add	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f7fe fba1 	bl	8001c72 <vListInsertEnd>
 8003530:	e004      	b.n	800353c <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003532:	4b0b      	ldr	r3, [pc, #44]	@ (8003560 <xTaskPriorityInherit+0xe0>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800353c:	2301      	movs	r3, #1
 800353e:	60fb      	str	r3, [r7, #12]
 8003540:	e008      	b.n	8003554 <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003546:	4b06      	ldr	r3, [pc, #24]	@ (8003560 <xTaskPriorityInherit+0xe0>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d201      	bcs.n	8003554 <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003550:	2301      	movs	r3, #1
 8003552:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003554:	68fb      	ldr	r3, [r7, #12]
	}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	200002e4 	.word	0x200002e4
 8003564:	200002e8 	.word	0x200002e8
 8003568:	200003ec 	.word	0x200003ec

0800356c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800356c:	b580      	push	{r7, lr}
 800356e:	b086      	sub	sp, #24
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003578:	2300      	movs	r3, #0
 800357a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d070      	beq.n	8003664 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003582:	4b3b      	ldr	r3, [pc, #236]	@ (8003670 <xTaskPriorityDisinherit+0x104>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	693a      	ldr	r2, [r7, #16]
 8003588:	429a      	cmp	r2, r3
 800358a:	d00b      	beq.n	80035a4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800358c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003590:	f383 8811 	msr	BASEPRI, r3
 8003594:	f3bf 8f6f 	isb	sy
 8003598:	f3bf 8f4f 	dsb	sy
 800359c:	60fb      	str	r3, [r7, #12]
}
 800359e:	bf00      	nop
 80035a0:	bf00      	nop
 80035a2:	e7fd      	b.n	80035a0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d10b      	bne.n	80035c4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80035ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b0:	f383 8811 	msr	BASEPRI, r3
 80035b4:	f3bf 8f6f 	isb	sy
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	60bb      	str	r3, [r7, #8]
}
 80035be:	bf00      	nop
 80035c0:	bf00      	nop
 80035c2:	e7fd      	b.n	80035c0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035c8:	1e5a      	subs	r2, r3, #1
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035d2:	693b      	ldr	r3, [r7, #16]
 80035d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d044      	beq.n	8003664 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d140      	bne.n	8003664 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	3304      	adds	r3, #4
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe fb9e 	bl	8001d28 <uxListRemove>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d115      	bne.n	800361e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035f6:	491f      	ldr	r1, [pc, #124]	@ (8003674 <xTaskPriorityDisinherit+0x108>)
 80035f8:	4613      	mov	r3, r2
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	4413      	add	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d10a      	bne.n	800361e <xTaskPriorityDisinherit+0xb2>
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800360c:	2201      	movs	r2, #1
 800360e:	fa02 f303 	lsl.w	r3, r2, r3
 8003612:	43da      	mvns	r2, r3
 8003614:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <xTaskPriorityDisinherit+0x10c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4013      	ands	r3, r2
 800361a:	4a17      	ldr	r2, [pc, #92]	@ (8003678 <xTaskPriorityDisinherit+0x10c>)
 800361c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	f1c3 0207 	rsb	r2, r3, #7
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003636:	2201      	movs	r2, #1
 8003638:	409a      	lsls	r2, r3
 800363a:	4b0f      	ldr	r3, [pc, #60]	@ (8003678 <xTaskPriorityDisinherit+0x10c>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	4a0d      	ldr	r2, [pc, #52]	@ (8003678 <xTaskPriorityDisinherit+0x10c>)
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003648:	4613      	mov	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	4413      	add	r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	4a08      	ldr	r2, [pc, #32]	@ (8003674 <xTaskPriorityDisinherit+0x108>)
 8003652:	441a      	add	r2, r3
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	3304      	adds	r3, #4
 8003658:	4619      	mov	r1, r3
 800365a:	4610      	mov	r0, r2
 800365c:	f7fe fb09 	bl	8001c72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003660:	2301      	movs	r3, #1
 8003662:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003664:	697b      	ldr	r3, [r7, #20]
	}
 8003666:	4618      	mov	r0, r3
 8003668:	3718      	adds	r7, #24
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	200002e4 	.word	0x200002e4
 8003674:	200002e8 	.word	0x200002e8
 8003678:	200003ec 	.word	0x200003ec

0800367c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800368a:	2301      	movs	r3, #1
 800368c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d079      	beq.n	8003788 <vTaskPriorityDisinheritAfterTimeout+0x10c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10b      	bne.n	80036b4 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800369c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036a0:	f383 8811 	msr	BASEPRI, r3
 80036a4:	f3bf 8f6f 	isb	sy
 80036a8:	f3bf 8f4f 	dsb	sy
 80036ac:	60fb      	str	r3, [r7, #12]
}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	e7fd      	b.n	80036b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80036b4:	69bb      	ldr	r3, [r7, #24]
 80036b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	429a      	cmp	r2, r3
 80036bc:	d902      	bls.n	80036c4 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	61fb      	str	r3, [r7, #28]
 80036c2:	e002      	b.n	80036ca <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036c8:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	69fa      	ldr	r2, [r7, #28]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d059      	beq.n	8003788 <vTaskPriorityDisinheritAfterTimeout+0x10c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80036d4:	69bb      	ldr	r3, [r7, #24]
 80036d6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	429a      	cmp	r2, r3
 80036dc:	d154      	bne.n	8003788 <vTaskPriorityDisinheritAfterTimeout+0x10c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80036de:	4b2c      	ldr	r3, [pc, #176]	@ (8003790 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69ba      	ldr	r2, [r7, #24]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d10b      	bne.n	8003700 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	60bb      	str	r3, [r7, #8]
}
 80036fa:	bf00      	nop
 80036fc:	bf00      	nop
 80036fe:	e7fd      	b.n	80036fc <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003704:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003706:	69bb      	ldr	r3, [r7, #24]
 8003708:	69fa      	ldr	r2, [r7, #28]
 800370a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800370c:	69bb      	ldr	r3, [r7, #24]
 800370e:	699b      	ldr	r3, [r3, #24]
 8003710:	2b00      	cmp	r3, #0
 8003712:	db04      	blt.n	800371e <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	f1c3 0207 	rsb	r2, r3, #7
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	6959      	ldr	r1, [r3, #20]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	4613      	mov	r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4a19      	ldr	r2, [pc, #100]	@ (8003794 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800372e:	4413      	add	r3, r2
 8003730:	4299      	cmp	r1, r3
 8003732:	d129      	bne.n	8003788 <vTaskPriorityDisinheritAfterTimeout+0x10c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	3304      	adds	r3, #4
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe faf5 	bl	8001d28 <uxListRemove>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10a      	bne.n	800375a <vTaskPriorityDisinheritAfterTimeout+0xde>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003748:	2201      	movs	r2, #1
 800374a:	fa02 f303 	lsl.w	r3, r2, r3
 800374e:	43da      	mvns	r2, r3
 8003750:	4b11      	ldr	r3, [pc, #68]	@ (8003798 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4013      	ands	r3, r2
 8003756:	4a10      	ldr	r2, [pc, #64]	@ (8003798 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003758:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800375e:	2201      	movs	r2, #1
 8003760:	409a      	lsls	r2, r3
 8003762:	4b0d      	ldr	r3, [pc, #52]	@ (8003798 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4313      	orrs	r3, r2
 8003768:	4a0b      	ldr	r2, [pc, #44]	@ (8003798 <vTaskPriorityDisinheritAfterTimeout+0x11c>)
 800376a:	6013      	str	r3, [r2, #0]
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4a06      	ldr	r2, [pc, #24]	@ (8003794 <vTaskPriorityDisinheritAfterTimeout+0x118>)
 800377a:	441a      	add	r2, r3
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	3304      	adds	r3, #4
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f7fe fa75 	bl	8001c72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003788:	bf00      	nop
 800378a:	3720      	adds	r7, #32
 800378c:	46bd      	mov	sp, r7
 800378e:	bd80      	pop	{r7, pc}
 8003790:	200002e4 	.word	0x200002e4
 8003794:	200002e8 	.word	0x200002e8
 8003798:	200003ec 	.word	0x200003ec

0800379c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800379c:	b480      	push	{r7}
 800379e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80037a0:	4b07      	ldr	r3, [pc, #28]	@ (80037c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d004      	beq.n	80037b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80037a8:	4b05      	ldr	r3, [pc, #20]	@ (80037c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80037ae:	3201      	adds	r2, #1
 80037b0:	649a      	str	r2, [r3, #72]	@ 0x48
		}

		return pxCurrentTCB;
 80037b2:	4b03      	ldr	r3, [pc, #12]	@ (80037c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80037b4:	681b      	ldr	r3, [r3, #0]
	}
 80037b6:	4618      	mov	r0, r3
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bc80      	pop	{r7}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	200002e4 	.word	0x200002e4

080037c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b084      	sub	sp, #16
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80037ce:	4b29      	ldr	r3, [pc, #164]	@ (8003874 <prvAddCurrentTaskToDelayedList+0xb0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037d4:	4b28      	ldr	r3, [pc, #160]	@ (8003878 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3304      	adds	r3, #4
 80037da:	4618      	mov	r0, r3
 80037dc:	f7fe faa4 	bl	8001d28 <uxListRemove>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d10b      	bne.n	80037fe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80037e6:	4b24      	ldr	r3, [pc, #144]	@ (8003878 <prvAddCurrentTaskToDelayedList+0xb4>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037ec:	2201      	movs	r2, #1
 80037ee:	fa02 f303 	lsl.w	r3, r2, r3
 80037f2:	43da      	mvns	r2, r3
 80037f4:	4b21      	ldr	r3, [pc, #132]	@ (800387c <prvAddCurrentTaskToDelayedList+0xb8>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4013      	ands	r3, r2
 80037fa:	4a20      	ldr	r2, [pc, #128]	@ (800387c <prvAddCurrentTaskToDelayedList+0xb8>)
 80037fc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d10a      	bne.n	800381c <prvAddCurrentTaskToDelayedList+0x58>
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d007      	beq.n	800381c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800380c:	4b1a      	ldr	r3, [pc, #104]	@ (8003878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3304      	adds	r3, #4
 8003812:	4619      	mov	r1, r3
 8003814:	481a      	ldr	r0, [pc, #104]	@ (8003880 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003816:	f7fe fa2c 	bl	8001c72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800381a:	e026      	b.n	800386a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800381c:	68fa      	ldr	r2, [r7, #12]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	4413      	add	r3, r2
 8003822:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003824:	4b14      	ldr	r3, [pc, #80]	@ (8003878 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68ba      	ldr	r2, [r7, #8]
 800382a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	429a      	cmp	r2, r3
 8003832:	d209      	bcs.n	8003848 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003834:	4b13      	ldr	r3, [pc, #76]	@ (8003884 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	4b0f      	ldr	r3, [pc, #60]	@ (8003878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	3304      	adds	r3, #4
 800383e:	4619      	mov	r1, r3
 8003840:	4610      	mov	r0, r2
 8003842:	f7fe fa39 	bl	8001cb8 <vListInsert>
}
 8003846:	e010      	b.n	800386a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003848:	4b0f      	ldr	r3, [pc, #60]	@ (8003888 <prvAddCurrentTaskToDelayedList+0xc4>)
 800384a:	681a      	ldr	r2, [r3, #0]
 800384c:	4b0a      	ldr	r3, [pc, #40]	@ (8003878 <prvAddCurrentTaskToDelayedList+0xb4>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	3304      	adds	r3, #4
 8003852:	4619      	mov	r1, r3
 8003854:	4610      	mov	r0, r2
 8003856:	f7fe fa2f 	bl	8001cb8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800385a:	4b0c      	ldr	r3, [pc, #48]	@ (800388c <prvAddCurrentTaskToDelayedList+0xc8>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	68ba      	ldr	r2, [r7, #8]
 8003860:	429a      	cmp	r2, r3
 8003862:	d202      	bcs.n	800386a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8003864:	4a09      	ldr	r2, [pc, #36]	@ (800388c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6013      	str	r3, [r2, #0]
}
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	200003e8 	.word	0x200003e8
 8003878:	200002e4 	.word	0x200002e4
 800387c:	200003ec 	.word	0x200003ec
 8003880:	200003d0 	.word	0x200003d0
 8003884:	200003a0 	.word	0x200003a0
 8003888:	2000039c 	.word	0x2000039c
 800388c:	20000404 	.word	0x20000404

08003890 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003890:	b480      	push	{r7}
 8003892:	b085      	sub	sp, #20
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	3b04      	subs	r3, #4
 80038a0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80038a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	3b04      	subs	r3, #4
 80038ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	f023 0201 	bic.w	r2, r3, #1
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3b04      	subs	r3, #4
 80038be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80038c0:	4a08      	ldr	r2, [pc, #32]	@ (80038e4 <pxPortInitialiseStack+0x54>)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	3b14      	subs	r3, #20
 80038ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80038cc:	687a      	ldr	r2, [r7, #4]
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3b20      	subs	r3, #32
 80038d6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80038d8:	68fb      	ldr	r3, [r7, #12]
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3714      	adds	r7, #20
 80038de:	46bd      	mov	sp, r7
 80038e0:	bc80      	pop	{r7}
 80038e2:	4770      	bx	lr
 80038e4:	080038e9 	.word	0x080038e9

080038e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80038ee:	2300      	movs	r3, #0
 80038f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80038f2:	4b12      	ldr	r3, [pc, #72]	@ (800393c <prvTaskExitError+0x54>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fa:	d00b      	beq.n	8003914 <prvTaskExitError+0x2c>
	__asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	60fb      	str	r3, [r7, #12]
}
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <prvTaskExitError+0x28>
	__asm volatile
 8003914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003918:	f383 8811 	msr	BASEPRI, r3
 800391c:	f3bf 8f6f 	isb	sy
 8003920:	f3bf 8f4f 	dsb	sy
 8003924:	60bb      	str	r3, [r7, #8]
}
 8003926:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003928:	bf00      	nop
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0fc      	beq.n	800392a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	3714      	adds	r7, #20
 8003936:	46bd      	mov	sp, r7
 8003938:	bc80      	pop	{r7}
 800393a:	4770      	bx	lr
 800393c:	2000000c 	.word	0x2000000c

08003940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003940:	4b07      	ldr	r3, [pc, #28]	@ (8003960 <pxCurrentTCBConst2>)
 8003942:	6819      	ldr	r1, [r3, #0]
 8003944:	6808      	ldr	r0, [r1, #0]
 8003946:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800394a:	f380 8809 	msr	PSP, r0
 800394e:	f3bf 8f6f 	isb	sy
 8003952:	f04f 0000 	mov.w	r0, #0
 8003956:	f380 8811 	msr	BASEPRI, r0
 800395a:	f04e 0e0d 	orr.w	lr, lr, #13
 800395e:	4770      	bx	lr

08003960 <pxCurrentTCBConst2>:
 8003960:	200002e4 	.word	0x200002e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003964:	bf00      	nop
 8003966:	bf00      	nop

08003968 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8003968:	4806      	ldr	r0, [pc, #24]	@ (8003984 <prvPortStartFirstTask+0x1c>)
 800396a:	6800      	ldr	r0, [r0, #0]
 800396c:	6800      	ldr	r0, [r0, #0]
 800396e:	f380 8808 	msr	MSP, r0
 8003972:	b662      	cpsie	i
 8003974:	b661      	cpsie	f
 8003976:	f3bf 8f4f 	dsb	sy
 800397a:	f3bf 8f6f 	isb	sy
 800397e:	df00      	svc	0
 8003980:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003982:	bf00      	nop
 8003984:	e000ed08 	.word	0xe000ed08

08003988 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800398e:	4b32      	ldr	r3, [pc, #200]	@ (8003a58 <xPortStartScheduler+0xd0>)
 8003990:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	781b      	ldrb	r3, [r3, #0]
 8003996:	b2db      	uxtb	r3, r3
 8003998:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	22ff      	movs	r2, #255	@ 0xff
 800399e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80039a8:	78fb      	ldrb	r3, [r7, #3]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80039b0:	b2da      	uxtb	r2, r3
 80039b2:	4b2a      	ldr	r3, [pc, #168]	@ (8003a5c <xPortStartScheduler+0xd4>)
 80039b4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80039b6:	4b2a      	ldr	r3, [pc, #168]	@ (8003a60 <xPortStartScheduler+0xd8>)
 80039b8:	2207      	movs	r2, #7
 80039ba:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039bc:	e009      	b.n	80039d2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80039be:	4b28      	ldr	r3, [pc, #160]	@ (8003a60 <xPortStartScheduler+0xd8>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3b01      	subs	r3, #1
 80039c4:	4a26      	ldr	r2, [pc, #152]	@ (8003a60 <xPortStartScheduler+0xd8>)
 80039c6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80039c8:	78fb      	ldrb	r3, [r7, #3]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80039d2:	78fb      	ldrb	r3, [r7, #3]
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039da:	2b80      	cmp	r3, #128	@ 0x80
 80039dc:	d0ef      	beq.n	80039be <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80039de:	4b20      	ldr	r3, [pc, #128]	@ (8003a60 <xPortStartScheduler+0xd8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f1c3 0307 	rsb	r3, r3, #7
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d00b      	beq.n	8003a02 <xPortStartScheduler+0x7a>
	__asm volatile
 80039ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039ee:	f383 8811 	msr	BASEPRI, r3
 80039f2:	f3bf 8f6f 	isb	sy
 80039f6:	f3bf 8f4f 	dsb	sy
 80039fa:	60bb      	str	r3, [r7, #8]
}
 80039fc:	bf00      	nop
 80039fe:	bf00      	nop
 8003a00:	e7fd      	b.n	80039fe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003a02:	4b17      	ldr	r3, [pc, #92]	@ (8003a60 <xPortStartScheduler+0xd8>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	021b      	lsls	r3, r3, #8
 8003a08:	4a15      	ldr	r2, [pc, #84]	@ (8003a60 <xPortStartScheduler+0xd8>)
 8003a0a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003a0c:	4b14      	ldr	r3, [pc, #80]	@ (8003a60 <xPortStartScheduler+0xd8>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003a14:	4a12      	ldr	r2, [pc, #72]	@ (8003a60 <xPortStartScheduler+0xd8>)
 8003a16:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003a20:	4b10      	ldr	r3, [pc, #64]	@ (8003a64 <xPortStartScheduler+0xdc>)
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a0f      	ldr	r2, [pc, #60]	@ (8003a64 <xPortStartScheduler+0xdc>)
 8003a26:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003a2a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003a64 <xPortStartScheduler+0xdc>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a0c      	ldr	r2, [pc, #48]	@ (8003a64 <xPortStartScheduler+0xdc>)
 8003a32:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003a36:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003a38:	f000 f8b8 	bl	8003bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <xPortStartScheduler+0xe0>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003a42:	f7ff ff91 	bl	8003968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003a46:	f7ff fabb 	bl	8002fc0 <vTaskSwitchContext>
	prvTaskExitError();
 8003a4a:	f7ff ff4d 	bl	80038e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003a4e:	2300      	movs	r3, #0
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3710      	adds	r7, #16
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	e000e400 	.word	0xe000e400
 8003a5c:	20000410 	.word	0x20000410
 8003a60:	20000414 	.word	0x20000414
 8003a64:	e000ed20 	.word	0xe000ed20
 8003a68:	2000000c 	.word	0x2000000c

08003a6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
	__asm volatile
 8003a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	607b      	str	r3, [r7, #4]
}
 8003a84:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003a86:	4b0f      	ldr	r3, [pc, #60]	@ (8003ac4 <vPortEnterCritical+0x58>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ac4 <vPortEnterCritical+0x58>)
 8003a8e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003a90:	4b0c      	ldr	r3, [pc, #48]	@ (8003ac4 <vPortEnterCritical+0x58>)
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d110      	bne.n	8003aba <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003a98:	4b0b      	ldr	r3, [pc, #44]	@ (8003ac8 <vPortEnterCritical+0x5c>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d00b      	beq.n	8003aba <vPortEnterCritical+0x4e>
	__asm volatile
 8003aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003aa6:	f383 8811 	msr	BASEPRI, r3
 8003aaa:	f3bf 8f6f 	isb	sy
 8003aae:	f3bf 8f4f 	dsb	sy
 8003ab2:	603b      	str	r3, [r7, #0]
}
 8003ab4:	bf00      	nop
 8003ab6:	bf00      	nop
 8003ab8:	e7fd      	b.n	8003ab6 <vPortEnterCritical+0x4a>
	}
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	2000000c 	.word	0x2000000c
 8003ac8:	e000ed04 	.word	0xe000ed04

08003acc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003ad2:	4b12      	ldr	r3, [pc, #72]	@ (8003b1c <vPortExitCritical+0x50>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d10b      	bne.n	8003af2 <vPortExitCritical+0x26>
	__asm volatile
 8003ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	607b      	str	r3, [r7, #4]
}
 8003aec:	bf00      	nop
 8003aee:	bf00      	nop
 8003af0:	e7fd      	b.n	8003aee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8003af2:	4b0a      	ldr	r3, [pc, #40]	@ (8003b1c <vPortExitCritical+0x50>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	3b01      	subs	r3, #1
 8003af8:	4a08      	ldr	r2, [pc, #32]	@ (8003b1c <vPortExitCritical+0x50>)
 8003afa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8003afc:	4b07      	ldr	r3, [pc, #28]	@ (8003b1c <vPortExitCritical+0x50>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d105      	bne.n	8003b10 <vPortExitCritical+0x44>
 8003b04:	2300      	movs	r3, #0
 8003b06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	f383 8811 	msr	BASEPRI, r3
}
 8003b0e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bc80      	pop	{r7}
 8003b18:	4770      	bx	lr
 8003b1a:	bf00      	nop
 8003b1c:	2000000c 	.word	0x2000000c

08003b20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8003b20:	f3ef 8009 	mrs	r0, PSP
 8003b24:	f3bf 8f6f 	isb	sy
 8003b28:	4b0d      	ldr	r3, [pc, #52]	@ (8003b60 <pxCurrentTCBConst>)
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b30:	6010      	str	r0, [r2, #0]
 8003b32:	e92d 4008 	stmdb	sp!, {r3, lr}
 8003b36:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8003b3a:	f380 8811 	msr	BASEPRI, r0
 8003b3e:	f7ff fa3f 	bl	8002fc0 <vTaskSwitchContext>
 8003b42:	f04f 0000 	mov.w	r0, #0
 8003b46:	f380 8811 	msr	BASEPRI, r0
 8003b4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8003b4e:	6819      	ldr	r1, [r3, #0]
 8003b50:	6808      	ldr	r0, [r1, #0]
 8003b52:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003b56:	f380 8809 	msr	PSP, r0
 8003b5a:	f3bf 8f6f 	isb	sy
 8003b5e:	4770      	bx	lr

08003b60 <pxCurrentTCBConst>:
 8003b60:	200002e4 	.word	0x200002e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8003b64:	bf00      	nop
 8003b66:	bf00      	nop

08003b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8003b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b72:	f383 8811 	msr	BASEPRI, r3
 8003b76:	f3bf 8f6f 	isb	sy
 8003b7a:	f3bf 8f4f 	dsb	sy
 8003b7e:	607b      	str	r3, [r7, #4]
}
 8003b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8003b82:	f7ff f963 	bl	8002e4c <xTaskIncrementTick>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d003      	beq.n	8003b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8003b8c:	4b06      	ldr	r3, [pc, #24]	@ (8003ba8 <xPortSysTickHandler+0x40>)
 8003b8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	2300      	movs	r3, #0
 8003b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	f383 8811 	msr	BASEPRI, r3
}
 8003b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8003ba0:	bf00      	nop
 8003ba2:	3708      	adds	r7, #8
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	bd80      	pop	{r7, pc}
 8003ba8:	e000ed04 	.word	0xe000ed04

08003bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8003bac:	b480      	push	{r7}
 8003bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8003bdc <vPortSetupTimerInterrupt+0x30>)
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003bb6:	4b0a      	ldr	r3, [pc, #40]	@ (8003be0 <vPortSetupTimerInterrupt+0x34>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8003bbc:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <vPortSetupTimerInterrupt+0x38>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a09      	ldr	r2, [pc, #36]	@ (8003be8 <vPortSetupTimerInterrupt+0x3c>)
 8003bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc6:	099b      	lsrs	r3, r3, #6
 8003bc8:	4a08      	ldr	r2, [pc, #32]	@ (8003bec <vPortSetupTimerInterrupt+0x40>)
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8003bce:	4b03      	ldr	r3, [pc, #12]	@ (8003bdc <vPortSetupTimerInterrupt+0x30>)
 8003bd0:	2207      	movs	r2, #7
 8003bd2:	601a      	str	r2, [r3, #0]
}
 8003bd4:	bf00      	nop
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bc80      	pop	{r7}
 8003bda:	4770      	bx	lr
 8003bdc:	e000e010 	.word	0xe000e010
 8003be0:	e000e018 	.word	0xe000e018
 8003be4:	20000000 	.word	0x20000000
 8003be8:	10624dd3 	.word	0x10624dd3
 8003bec:	e000e014 	.word	0xe000e014

08003bf0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b085      	sub	sp, #20
 8003bf4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8003bf6:	f3ef 8305 	mrs	r3, IPSR
 8003bfa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2b0f      	cmp	r3, #15
 8003c00:	d915      	bls.n	8003c2e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8003c02:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <vPortValidateInterruptPriority+0x70>)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8003c0c:	4b15      	ldr	r3, [pc, #84]	@ (8003c64 <vPortValidateInterruptPriority+0x74>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	7afa      	ldrb	r2, [r7, #11]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d20b      	bcs.n	8003c2e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8003c16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1a:	f383 8811 	msr	BASEPRI, r3
 8003c1e:	f3bf 8f6f 	isb	sy
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	607b      	str	r3, [r7, #4]
}
 8003c28:	bf00      	nop
 8003c2a:	bf00      	nop
 8003c2c:	e7fd      	b.n	8003c2a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8003c2e:	4b0e      	ldr	r3, [pc, #56]	@ (8003c68 <vPortValidateInterruptPriority+0x78>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003c36:	4b0d      	ldr	r3, [pc, #52]	@ (8003c6c <vPortValidateInterruptPriority+0x7c>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	429a      	cmp	r2, r3
 8003c3c:	d90b      	bls.n	8003c56 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8003c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c42:	f383 8811 	msr	BASEPRI, r3
 8003c46:	f3bf 8f6f 	isb	sy
 8003c4a:	f3bf 8f4f 	dsb	sy
 8003c4e:	603b      	str	r3, [r7, #0]
}
 8003c50:	bf00      	nop
 8003c52:	bf00      	nop
 8003c54:	e7fd      	b.n	8003c52 <vPortValidateInterruptPriority+0x62>
	}
 8003c56:	bf00      	nop
 8003c58:	3714      	adds	r7, #20
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bc80      	pop	{r7}
 8003c5e:	4770      	bx	lr
 8003c60:	e000e3f0 	.word	0xe000e3f0
 8003c64:	20000410 	.word	0x20000410
 8003c68:	e000ed0c 	.word	0xe000ed0c
 8003c6c:	20000414 	.word	0x20000414

08003c70 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b08a      	sub	sp, #40	@ 0x28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8003c7c:	f7ff f83a 	bl	8002cf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8003c80:	4b5c      	ldr	r3, [pc, #368]	@ (8003df4 <pvPortMalloc+0x184>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8003c88:	f000 f924 	bl	8003ed4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003c8c:	4b5a      	ldr	r3, [pc, #360]	@ (8003df8 <pvPortMalloc+0x188>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f040 8095 	bne.w	8003dc4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d01e      	beq.n	8003cde <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4413      	add	r3, r2
 8003ca6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d015      	beq.n	8003cde <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	f023 0307 	bic.w	r3, r3, #7
 8003cb8:	3308      	adds	r3, #8
 8003cba:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00b      	beq.n	8003cde <pvPortMalloc+0x6e>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	617b      	str	r3, [r7, #20]
}
 8003cd8:	bf00      	nop
 8003cda:	bf00      	nop
 8003cdc:	e7fd      	b.n	8003cda <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d06f      	beq.n	8003dc4 <pvPortMalloc+0x154>
 8003ce4:	4b45      	ldr	r3, [pc, #276]	@ (8003dfc <pvPortMalloc+0x18c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d86a      	bhi.n	8003dc4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8003cee:	4b44      	ldr	r3, [pc, #272]	@ (8003e00 <pvPortMalloc+0x190>)
 8003cf0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8003cf2:	4b43      	ldr	r3, [pc, #268]	@ (8003e00 <pvPortMalloc+0x190>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003cf8:	e004      	b.n	8003d04 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	d903      	bls.n	8003d16 <pvPortMalloc+0xa6>
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f1      	bne.n	8003cfa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8003d16:	4b37      	ldr	r3, [pc, #220]	@ (8003df4 <pvPortMalloc+0x184>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d1c:	429a      	cmp	r2, r3
 8003d1e:	d051      	beq.n	8003dc4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003d20:	6a3b      	ldr	r3, [r7, #32]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	2208      	movs	r2, #8
 8003d26:	4413      	add	r3, r2
 8003d28:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d34:	685a      	ldr	r2, [r3, #4]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	1ad2      	subs	r2, r2, r3
 8003d3a:	2308      	movs	r3, #8
 8003d3c:	005b      	lsls	r3, r3, #1
 8003d3e:	429a      	cmp	r2, r3
 8003d40:	d920      	bls.n	8003d84 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003d42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4413      	add	r3, r2
 8003d48:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8003d4a:	69bb      	ldr	r3, [r7, #24]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00b      	beq.n	8003d6c <pvPortMalloc+0xfc>
	__asm volatile
 8003d54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d58:	f383 8811 	msr	BASEPRI, r3
 8003d5c:	f3bf 8f6f 	isb	sy
 8003d60:	f3bf 8f4f 	dsb	sy
 8003d64:	613b      	str	r3, [r7, #16]
}
 8003d66:	bf00      	nop
 8003d68:	bf00      	nop
 8003d6a:	e7fd      	b.n	8003d68 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8003d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	1ad2      	subs	r2, r2, r3
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8003d7e:	69b8      	ldr	r0, [r7, #24]
 8003d80:	f000 f90a 	bl	8003f98 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8003d84:	4b1d      	ldr	r3, [pc, #116]	@ (8003dfc <pvPortMalloc+0x18c>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dfc <pvPortMalloc+0x18c>)
 8003d90:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8003d92:	4b1a      	ldr	r3, [pc, #104]	@ (8003dfc <pvPortMalloc+0x18c>)
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	4b1b      	ldr	r3, [pc, #108]	@ (8003e04 <pvPortMalloc+0x194>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d203      	bcs.n	8003da6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8003d9e:	4b17      	ldr	r3, [pc, #92]	@ (8003dfc <pvPortMalloc+0x18c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a18      	ldr	r2, [pc, #96]	@ (8003e04 <pvPortMalloc+0x194>)
 8003da4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003da8:	685a      	ldr	r2, [r3, #4]
 8003daa:	4b13      	ldr	r3, [pc, #76]	@ (8003df8 <pvPortMalloc+0x188>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	431a      	orrs	r2, r3
 8003db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8003db4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003db6:	2200      	movs	r2, #0
 8003db8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8003dba:	4b13      	ldr	r3, [pc, #76]	@ (8003e08 <pvPortMalloc+0x198>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	4a11      	ldr	r2, [pc, #68]	@ (8003e08 <pvPortMalloc+0x198>)
 8003dc2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8003dc4:	f7fe ffa4 	bl	8002d10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	f003 0307 	and.w	r3, r3, #7
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d00b      	beq.n	8003dea <pvPortMalloc+0x17a>
	__asm volatile
 8003dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dd6:	f383 8811 	msr	BASEPRI, r3
 8003dda:	f3bf 8f6f 	isb	sy
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	60fb      	str	r3, [r7, #12]
}
 8003de4:	bf00      	nop
 8003de6:	bf00      	nop
 8003de8:	e7fd      	b.n	8003de6 <pvPortMalloc+0x176>
	return pvReturn;
 8003dea:	69fb      	ldr	r3, [r7, #28]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3728      	adds	r7, #40	@ 0x28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	20001020 	.word	0x20001020
 8003df8:	20001034 	.word	0x20001034
 8003dfc:	20001024 	.word	0x20001024
 8003e00:	20001018 	.word	0x20001018
 8003e04:	20001028 	.word	0x20001028
 8003e08:	2000102c 	.word	0x2000102c

08003e0c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d04f      	beq.n	8003ebe <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8003e1e:	2308      	movs	r3, #8
 8003e20:	425b      	negs	r3, r3
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	4413      	add	r3, r2
 8003e26:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8003e28:	697b      	ldr	r3, [r7, #20]
 8003e2a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	4b25      	ldr	r3, [pc, #148]	@ (8003ec8 <vPortFree+0xbc>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <vPortFree+0x46>
	__asm volatile
 8003e3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e3e:	f383 8811 	msr	BASEPRI, r3
 8003e42:	f3bf 8f6f 	isb	sy
 8003e46:	f3bf 8f4f 	dsb	sy
 8003e4a:	60fb      	str	r3, [r7, #12]
}
 8003e4c:	bf00      	nop
 8003e4e:	bf00      	nop
 8003e50:	e7fd      	b.n	8003e4e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d00b      	beq.n	8003e72 <vPortFree+0x66>
	__asm volatile
 8003e5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e5e:	f383 8811 	msr	BASEPRI, r3
 8003e62:	f3bf 8f6f 	isb	sy
 8003e66:	f3bf 8f4f 	dsb	sy
 8003e6a:	60bb      	str	r3, [r7, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	bf00      	nop
 8003e70:	e7fd      	b.n	8003e6e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	4b14      	ldr	r3, [pc, #80]	@ (8003ec8 <vPortFree+0xbc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d01e      	beq.n	8003ebe <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d11a      	bne.n	8003ebe <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	685a      	ldr	r2, [r3, #4]
 8003e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8003ec8 <vPortFree+0xbc>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	43db      	mvns	r3, r3
 8003e92:	401a      	ands	r2, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8003e98:	f7fe ff2c 	bl	8002cf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	685a      	ldr	r2, [r3, #4]
 8003ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ecc <vPortFree+0xc0>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	4a09      	ldr	r2, [pc, #36]	@ (8003ecc <vPortFree+0xc0>)
 8003ea8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8003eaa:	6938      	ldr	r0, [r7, #16]
 8003eac:	f000 f874 	bl	8003f98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8003eb0:	4b07      	ldr	r3, [pc, #28]	@ (8003ed0 <vPortFree+0xc4>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	4a06      	ldr	r2, [pc, #24]	@ (8003ed0 <vPortFree+0xc4>)
 8003eb8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8003eba:	f7fe ff29 	bl	8002d10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8003ebe:	bf00      	nop
 8003ec0:	3718      	adds	r7, #24
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20001034 	.word	0x20001034
 8003ecc:	20001024 	.word	0x20001024
 8003ed0:	20001030 	.word	0x20001030

08003ed4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003eda:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8003ede:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8003ee0:	4b27      	ldr	r3, [pc, #156]	@ (8003f80 <prvHeapInit+0xac>)
 8003ee2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f003 0307 	and.w	r3, r3, #7
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00c      	beq.n	8003f08 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3307      	adds	r3, #7
 8003ef2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0307 	bic.w	r3, r3, #7
 8003efa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003efc:	68ba      	ldr	r2, [r7, #8]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	4a1f      	ldr	r2, [pc, #124]	@ (8003f80 <prvHeapInit+0xac>)
 8003f04:	4413      	add	r3, r2
 8003f06:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003f0c:	4a1d      	ldr	r2, [pc, #116]	@ (8003f84 <prvHeapInit+0xb0>)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8003f12:	4b1c      	ldr	r3, [pc, #112]	@ (8003f84 <prvHeapInit+0xb0>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	68ba      	ldr	r2, [r7, #8]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8003f20:	2208      	movs	r2, #8
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	1a9b      	subs	r3, r3, r2
 8003f26:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
 8003f2e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a15      	ldr	r2, [pc, #84]	@ (8003f88 <prvHeapInit+0xb4>)
 8003f34:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8003f36:	4b14      	ldr	r3, [pc, #80]	@ (8003f88 <prvHeapInit+0xb4>)
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8003f3e:	4b12      	ldr	r3, [pc, #72]	@ (8003f88 <prvHeapInit+0xb4>)
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	68fa      	ldr	r2, [r7, #12]
 8003f4e:	1ad2      	subs	r2, r2, r3
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003f54:	4b0c      	ldr	r3, [pc, #48]	@ (8003f88 <prvHeapInit+0xb4>)
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	4a0a      	ldr	r2, [pc, #40]	@ (8003f8c <prvHeapInit+0xb8>)
 8003f62:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	685b      	ldr	r3, [r3, #4]
 8003f68:	4a09      	ldr	r2, [pc, #36]	@ (8003f90 <prvHeapInit+0xbc>)
 8003f6a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003f6c:	4b09      	ldr	r3, [pc, #36]	@ (8003f94 <prvHeapInit+0xc0>)
 8003f6e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8003f72:	601a      	str	r2, [r3, #0]
}
 8003f74:	bf00      	nop
 8003f76:	3714      	adds	r7, #20
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bc80      	pop	{r7}
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	20000418 	.word	0x20000418
 8003f84:	20001018 	.word	0x20001018
 8003f88:	20001020 	.word	0x20001020
 8003f8c:	20001028 	.word	0x20001028
 8003f90:	20001024 	.word	0x20001024
 8003f94:	20001034 	.word	0x20001034

08003f98 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b085      	sub	sp, #20
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8003fa0:	4b27      	ldr	r3, [pc, #156]	@ (8004040 <prvInsertBlockIntoFreeList+0xa8>)
 8003fa2:	60fb      	str	r3, [r7, #12]
 8003fa4:	e002      	b.n	8003fac <prvInsertBlockIntoFreeList+0x14>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d8f7      	bhi.n	8003fa6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	685b      	ldr	r3, [r3, #4]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	4413      	add	r3, r2
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d108      	bne.n	8003fda <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	441a      	add	r2, r3
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	68ba      	ldr	r2, [r7, #8]
 8003fe4:	441a      	add	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	429a      	cmp	r2, r3
 8003fec:	d118      	bne.n	8004020 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681a      	ldr	r2, [r3, #0]
 8003ff2:	4b14      	ldr	r3, [pc, #80]	@ (8004044 <prvInsertBlockIntoFreeList+0xac>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	d00d      	beq.n	8004016 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	441a      	add	r2, r3
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	e008      	b.n	8004028 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004016:	4b0b      	ldr	r3, [pc, #44]	@ (8004044 <prvInsertBlockIntoFreeList+0xac>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	e003      	b.n	8004028 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	429a      	cmp	r2, r3
 800402e:	d002      	beq.n	8004036 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	687a      	ldr	r2, [r7, #4]
 8004034:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004036:	bf00      	nop
 8004038:	3714      	adds	r7, #20
 800403a:	46bd      	mov	sp, r7
 800403c:	bc80      	pop	{r7}
 800403e:	4770      	bx	lr
 8004040:	20001018 	.word	0x20001018
 8004044:	20001020 	.word	0x20001020

08004048 <memset>:
 8004048:	4603      	mov	r3, r0
 800404a:	4402      	add	r2, r0
 800404c:	4293      	cmp	r3, r2
 800404e:	d100      	bne.n	8004052 <memset+0xa>
 8004050:	4770      	bx	lr
 8004052:	f803 1b01 	strb.w	r1, [r3], #1
 8004056:	e7f9      	b.n	800404c <memset+0x4>

08004058 <__libc_init_array>:
 8004058:	b570      	push	{r4, r5, r6, lr}
 800405a:	2600      	movs	r6, #0
 800405c:	4d0c      	ldr	r5, [pc, #48]	@ (8004090 <__libc_init_array+0x38>)
 800405e:	4c0d      	ldr	r4, [pc, #52]	@ (8004094 <__libc_init_array+0x3c>)
 8004060:	1b64      	subs	r4, r4, r5
 8004062:	10a4      	asrs	r4, r4, #2
 8004064:	42a6      	cmp	r6, r4
 8004066:	d109      	bne.n	800407c <__libc_init_array+0x24>
 8004068:	f000 f828 	bl	80040bc <_init>
 800406c:	2600      	movs	r6, #0
 800406e:	4d0a      	ldr	r5, [pc, #40]	@ (8004098 <__libc_init_array+0x40>)
 8004070:	4c0a      	ldr	r4, [pc, #40]	@ (800409c <__libc_init_array+0x44>)
 8004072:	1b64      	subs	r4, r4, r5
 8004074:	10a4      	asrs	r4, r4, #2
 8004076:	42a6      	cmp	r6, r4
 8004078:	d105      	bne.n	8004086 <__libc_init_array+0x2e>
 800407a:	bd70      	pop	{r4, r5, r6, pc}
 800407c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004080:	4798      	blx	r3
 8004082:	3601      	adds	r6, #1
 8004084:	e7ee      	b.n	8004064 <__libc_init_array+0xc>
 8004086:	f855 3b04 	ldr.w	r3, [r5], #4
 800408a:	4798      	blx	r3
 800408c:	3601      	adds	r6, #1
 800408e:	e7f2      	b.n	8004076 <__libc_init_array+0x1e>
 8004090:	080041b4 	.word	0x080041b4
 8004094:	080041b4 	.word	0x080041b4
 8004098:	080041b4 	.word	0x080041b4
 800409c:	080041b8 	.word	0x080041b8

080040a0 <memcpy>:
 80040a0:	440a      	add	r2, r1
 80040a2:	4291      	cmp	r1, r2
 80040a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80040a8:	d100      	bne.n	80040ac <memcpy+0xc>
 80040aa:	4770      	bx	lr
 80040ac:	b510      	push	{r4, lr}
 80040ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80040b2:	4291      	cmp	r1, r2
 80040b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040b8:	d1f9      	bne.n	80040ae <memcpy+0xe>
 80040ba:	bd10      	pop	{r4, pc}

080040bc <_init>:
 80040bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040be:	bf00      	nop
 80040c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040c2:	bc08      	pop	{r3}
 80040c4:	469e      	mov	lr, r3
 80040c6:	4770      	bx	lr

080040c8 <_fini>:
 80040c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80040ca:	bf00      	nop
 80040cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80040ce:	bc08      	pop	{r3}
 80040d0:	469e      	mov	lr, r3
 80040d2:	4770      	bx	lr
